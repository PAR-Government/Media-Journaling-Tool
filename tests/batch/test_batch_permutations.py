from maskgen import tool_set
import unittest
import os
import shutil
import json

from maskgen.batch.permutations import *


class TestToolSet(unittest.TestCase):
    def test_chained(self):
        manager = PermuteGroupManager()
        num_4_iterator = lambda: xrange(1, 4 + 1,1).__iter__()
        manager.loadParameter('group_a', IteratorPermuteGroupElement('1.num_4_iterator',num_4_iterator))
        manager.loadParameter('group_a',IteratorPermuteGroupElement('1.list',['1','2','3'].__iter__))
        manager.next()
        self.assertTrue(manager.hasNext())
        self.assertEquals('1',manager.current('group_a','1.list'))
        self.assertEquals(1, manager.current('group_a', '1.num_4_iterator'))
        self.assertTrue(manager.hasNext())
        manager.next()
        self.assertTrue(manager.hasNext())
        self.assertEquals('2', manager.current('group_a', '1.list'))
        self.assertEquals(1, manager.current('group_a', '1.num_4_iterator'))
        manager.next()
        self.assertTrue(manager.hasNext())
        self.assertEquals('3', manager.current('group_a', '1.list'))
        self.assertEquals(1, manager.current('group_a', '1.num_4_iterator'))
        manager.next()
        self.assertTrue(manager.hasNext())
        self.assertEquals('1', manager.current('group_a', '1.list'))
        self.assertEquals(2, manager.current('group_a', '1.num_4_iterator'))
        manager.next()
        self.assertTrue(manager.hasNext())
        self.assertEquals('2', manager.current('group_a', '1.list'))
        self.assertEquals(2, manager.current('group_a', '1.num_4_iterator'))
        manager.next()
        self.assertTrue(manager.hasNext())
        self.assertEquals('3', manager.current('group_a', '1.list'))
        self.assertEquals(2, manager.current('group_a', '1.num_4_iterator'))
        manager.next()
        self.assertTrue(manager.hasNext())
        self.assertEquals('1', manager.current('group_a', '1.list'))
        self.assertEquals(3, manager.current('group_a', '1.num_4_iterator'))
        manager.next()
        self.assertTrue(manager.hasNext())
        self.assertEquals('2', manager.current('group_a', '1.list'))
        self.assertEquals(3, manager.current('group_a', '1.num_4_iterator'))
        manager.next()
        self.assertTrue(manager.hasNext())
        self.assertEquals('3', manager.current('group_a', '1.list'))
        self.assertEquals(3, manager.current('group_a', '1.num_4_iterator'))
        manager.next()
        self.assertTrue(manager.hasNext())
        self.assertEquals('1', manager.current('group_a', '1.list'))
        self.assertEquals(4, manager.current('group_a', '1.num_4_iterator'))
        manager.next()
        self.assertTrue(manager.hasNext())
        self.assertEquals('2', manager.current('group_a', '1.list'))
        self.assertEquals(4, manager.current('group_a', '1.num_4_iterator'))
        manager.next()
        self.assertTrue(manager.hasNext())
        self.assertEquals('3', manager.current('group_a', '1.list'))
        self.assertEquals(4, manager.current('group_a', '1.num_4_iterator'))
        manager.next()
        self.assertFalse(manager.hasNext())

    def test_restore(self):
        if os.path.exists('pgm'):
            shutil.rmtree('pgm')
        os.mkdir('pgm')
        manager = PermuteGroupManager('pgm')
        num_4_iterator = lambda: xrange(1, 4 + 1,1).__iter__()
        manager.loadParameter('group_a', IteratorPermuteGroupElement('2.num_4_iterator',num_4_iterator))
        manager.loadParameter('group_a',IteratorPermuteGroupElement('2.list',['1','2','3'].__iter__))
        manager.next()
        self.assertTrue(manager.hasNext())
        self.assertEquals('1',manager.current('group_a','2.list'))
        self.assertEquals(1, manager.current('group_a', '2.num_4_iterator'))
        self.assertTrue(manager.hasNext())
        manager.save()
        manager.next()
        manager = PermuteGroupManager('pgm')
        manager.loadParameter('group_a', IteratorPermuteGroupElement('2.num_4_iterator', num_4_iterator))
        manager.loadParameter('group_a', IteratorPermuteGroupElement('2.list', ['1', '2', '3'].__iter__))
        manager.save()
        manager.next()
        self.assertTrue(manager.hasNext())
        self.assertEquals('2', manager.current('group_a', '2.list'))
        self.assertEquals(1, manager.current('group_a', '2.num_4_iterator'))
        manager.next()
        self.assertTrue(manager.hasNext())
        self.assertEquals('3', manager.current('group_a', '2.list'))
        self.assertEquals(1, manager.current('group_a', '2.num_4_iterator'))
        manager.next()
        self.assertTrue(manager.hasNext())
        self.assertEquals('1', manager.current('group_a', '2.list'))
        self.assertEquals(2, manager.current('group_a', '2.num_4_iterator'))
        manager.next()
        self.assertTrue(manager.hasNext())
        self.assertEquals('2', manager.current('group_a', '2.list'))
        self.assertEquals(2, manager.current('group_a', '2.num_4_iterator'))
        manager.next()
        self.assertTrue(manager.hasNext())
        self.assertEquals('3', manager.current('group_a', '2.list'))
        self.assertEquals(2, manager.current('group_a', '2.num_4_iterator'))
        manager.next()
        self.assertTrue(manager.hasNext())
        self.assertEquals('1', manager.current('group_a', '2.list'))
        self.assertEquals(3, manager.current('group_a', '2.num_4_iterator'))
        manager.next()
        self.assertTrue(manager.hasNext())
        self.assertEquals('2', manager.current('group_a', '2.list'))
        self.assertEquals(3, manager.current('group_a', '2.num_4_iterator'))
        manager.next()
        self.assertTrue(manager.hasNext())
        self.assertEquals('3', manager.current('group_a', '2.list'))
        self.assertEquals(3, manager.current('group_a', '2.num_4_iterator'))
        manager.retainFailedState('failures.txt')
        with open('pgm/failures.txt') as fp:
            line = fp.readline()
        failed_state =  json.loads(line)
        self.assertEquals(3,failed_state["group_a"]["2.num_4_iterator"])
        self.assertEquals('3', failed_state["group_a"]["2.list"])
        manager.loadFromFailedState('failures.txt')
        manager.next()
        self.assertTrue(manager.hasNext())
        self.assertEquals('3', manager.current('group_a', '2.list'))
        self.assertEquals(3, manager.current('group_a', '2.num_4_iterator'))
        manager.next()
        self.assertFalse(manager.hasNext())
        shutil.rmtree('pgm')


    def test_unchained(self):
        manager = PermuteGroupManager()
        num_4_iterator = lambda: xrange(1, 4 + 1, 1).__iter__()
        manager.loadParameter('__global__', IteratorPermuteGroupElement('1.list', ['1', '2', '3'].__iter__))
        manager.loadParameter('__global__', IteratorPermuteGroupElement('1.num_4_iterator', num_4_iterator))
        self.assertTrue(manager.hasNext())
        manager.next()
        self.assertEquals('1', manager.current('__global__', '1.list'))
        self.assertEquals(1, manager.current('__global__', '1.num_4_iterator'))
        manager.next()
        self.assertTrue(manager.hasNext())
        self.assertEquals('2', manager.current('__global__', '1.list'))
        self.assertEquals(2, manager.current('__global__', '1.num_4_iterator'))
        manager.next()
        self.assertTrue(manager.hasNext())
        self.assertEquals('3', manager.current('__global__', '1.list'))
        self.assertEquals(3, manager.current('__global__', '1.num_4_iterator'))
        manager.next()
        self.assertTrue(manager.hasNext())

if __name__ == '__main__':
    unittest.main()
