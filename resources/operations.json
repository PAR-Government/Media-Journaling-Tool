{
  "version": "04.0810.546e996a36",
  "operations": [
     {
      "category": "Audio",
      "name": "AudioCopyAdd",
      "mandatoryparameters": {
        "voice" : {
            "type": "yesno",
             "description": "Is the sample a voice."
        },
        "add type" : {
            "type": "list",
            "values" : ["replace", "overlay"],
             "description": "Replacing or overlaying."
        },
        "synchronization" : {
            "type": "list",
            "values" : ["none", "spacing", "compressing"],
             "description": "If additional track alignment changes occurred with the addition."
        },
        "Copy Stream" : {
          "type" : "list",
          "values": ["left", "right", "all"],
          "description" : "all includes mono and stereo, depending on available streams"
        },
        "Insertion Stream" : {
          "type" : "list",
          "values": ["left", "right", "all"],
          "description" : "all includes mono and stereo, depending on available streams"
        },
        "Copy Start Time": {
          "type": "time",
          "description": "Start time of the audio clip (HH:MI:SS.micro or frame number)"
        },
        "Insertion Time": {
          "type": "time",
          "description": "Replace insertion time of the audio clip (HH:MI:SS.micro or frame number)"
        }
      },
      "rules": [
        "checkFrameTimes",
        "checkSize",
        "checkFileTypeChange",
        "checkAddFrameTime",
        "checkSameChannels"
      ],
      "optionalparameters": {
        "Copy End Time": {
          "type": "time",
          "description": "End time of the audio clip (HH:MI:SS.micro or frame number)"
        }
      },
       "compareparameters": {
          "function" :"maskgen.video_tools.audioCompare"
      },
      "analysisOperations": [],
      "description": "Copy audio stream(s) from one section of video to another (or one stream to the other)",
      "includeInMask": false,
      "generateMask" : true,
      "transitions": [
        "video.video",
        "audio.audio"
      ]
    },
    {
      "category": "Audio",
      "name": "AudioSample",
      "mandatoryparameters": {
        "Start Time": {
          "type": "time",
          "description": "Start time of the audio clip (HH:MI:SS.micro or frame number)"
        },
        "End Time": {
          "type": "time",
          "description": "End time of the audio clip (HH:MI:SS.micro or frame number)"
        },
        "Copy Stream" : {
          "type" : "list",
          "values": ["left", "right", "all"],
          "description" : "all includes mono and stereo, depending on available streams"
        }
      },
      "rules": ["checkFrameTimes"],
      "optionalparameters": {},
      "analysisOperations": [],
      "description": "Extract audio stream(s) from a video",
      "includeInMask": false,
      "generateMask" : false,
      "transitions": [
        "video.audio",
        "audio.audio",
        "video.video"
      ]
    },
    {
      "category": "Audio",
      "name": "DeleteAudioSample",
      "mandatoryparameters": {
       "Start Time": {
          "type": "time",
          "description": "Start time of the audio clip (HH:MI:SS.micro or frame number)"
        },
        "End Time": {
          "type": "time",
          "description": "End time of the audio clip (HH:MI:SS.micro or frame number)"
        },
        "Stream" : {
          "type" : "list",
          "values": ["left", "right", "all"],
          "description" : "all includes mono and stereo, depending on available streams"
        },
        "Type" : {
          "type" : "list",
          "values": ["splice", "interpolation", "other"],
          "description" : "Type of deletion"
        }
      },
      "rules": [
        "checkSize",
        "checkHasVideoChannel",
        "checkFileTypeChange",
        "checkFrameTimes"
      ],
      "optionalparameters": {
      },
      "analysisOperations": [],
      "description": "Remove a portion or all of an audio stream from a video",
      "includeInMask": false,
      "generateMask" : false,
      "transitions": [
        "video.video"
      ]
    },
    {
      "category": "Audio",
      "name": "AddAudioSample",
      "mandatoryparameters": {
        "voice" : {
            "type": "yesno",
             "description": "Is the sample a voice."
        },
        "add type" : {
            "type": "list",
            "values" : ["replace", "overlay"],
             "description": "Replacing or overlaying."
        },
        "synchronization" : {
            "type": "list",
            "values" : ["none", "spacing", "compressing"],
             "description": "If additional track alignment changes occurred with the addition."
        },
        "Start Time": {
          "type": "time",
          "description": "Start time of the audio clip (HH:MI:SS.micro or frame number)"
        },
        "Stream" : {
          "type" : "list",
          "values": ["left", "right", "all"],
          "description" : "all includes mono and stereo, depending on available streams"
        },
        "Direct from PC" : {
          "type" : "yesno",
          "description" : "Is audio recorded into the video from PC rather than a separate audio file?"
        }
      },
      "rules": [
        "checkForDonorAudio",
        "checkSize",
        "checkFileTypeChange",
        "checkFrameTimes",
        "checkFrameTimeAlignment",
        "checkAudioChannels"
      ],
      "optionalparameters": {
        "End Time": {
          "type": "time",
          "description": "End time of the audio clip (HH:MI:SS.micro or frame number)"
        }
      },
      "compareparameters": {
          "function" :"maskgen.video_tools.audioCompare"
      },
      "analysisOperations": [],
      "description": "Adding a donor audio stream to a video",
      "includeInMask": false,
      "generateMask" : true,
      "transitions": [
        "video.video",
        "audio.audio",
        "audio.video"
      ]
    },
    {
      "category": "Audio",
      "name": "AudioFilter",
      "mandatoryparameters": {
         "Frequency": {
          "type": "int[0:10000000]",
          "description": "Frequency"
        },
        "Filter Type": {
          "type": "list",
          "values" : ["high pass", "low pass", "EQ", "FFT", "Adaptive", "Spectral Subtraction"],
          "description": "Type of filter"
        },
        "Start Time": {
          "type": "time",
          "description": "Start time of the audio clip (HH:MI:SS.micro or frame number)"
        },
         "Smoothing": {
          "type": "yesno",
          "description": "If noise smoothing algorithms were applied"
        }
      },
      "rules": [
        "checkFileTypeChange",
        "checkFrameTimes",
        "checkFrameTimeAlignment",
        "checkSameChannels"
      ],
      "optionalparameters": {
        "Stream" : {
          "type" : "list",
          "values": ["left", "right", "all"],
          "description" : "all includes mono and stereo, depending on available streams"
        },
        "End Time": {
          "type": "time",
          "description": "End time of the audio clip (HH:MI:SS.micro or frame number)"
        },
        "Noise Reduction": {
          "type": "int[0:100]",
          "description": "Percentage of Noise Reduction"
        },
        "Amplitude Reduction": {
          "type": "int[0:40]",
          "description": "In Decibals"
        },
        "Spectral Decay Rate": {
          "type": "int[0:100]",
          "description": "Percentage of frequencies processed for noise below analyzed noise floor"
        }
      },
      "analysisOperations": [],
      "description": "Apply filter to audio stream",
      "includeInMask": false,
      "generateMask" : true,
      "compareparameters": {
          "function" :"maskgen.video_tools.audioCompare"
      },
      "transitions": [
        "video.video",
        "audio.audio"
      ]
    },
    {
      "category": "Audio",
      "name": "AudioAmplify",
      "mandatoryparameters": {
        "PreGain": {
          "type": "int[-100000:100000]",
          "description": "How much to raise or lower volume"
        },
        "Fading": {
          "type": "list",
          "values" : ["fade in","fade out","both","cross", "none"],
          "description": "Fading effect"
        },
        "Left Pan": {
          "type": "int[-100:100]",
          "description": "Percentage Decrease/Increase from -100 to 100"
        },
        "Right Pan": {
          "type": "int[-100:100]",
          "description": "Percentage Decrease/Increase from -100 to 100"
        }
      },
      "rules": [
        "checkFileTypeChange",
        "checkFrameTimes",
        "checkSameChannels"
      ],
      "optionalparameters": {
        "Final Fade Level": {
          "type": "int[-100000:100000]",
          "description": "Final fade level in Db, if applicable"
        },
        "Stream" : {
          "type" : "list",
          "values": ["left", "right", "all"],
          "description" : "all includes mono and stereo, depending on available streams"
        },
        "Start Time": {
          "type": "time",
          "description": "Start time of the audio clip (HH:MI:SS.micro or frame number)"
        },
        "End Time": {
          "type": "time",
          "description": "End time of the audio clip (HH:MI:SS.micro or frame number)"
        }
      },
      "analysisOperations": [],
      "description": "Amplify Audio Signal",
      "includeInMask": false,
      "generateMask" : true,
      "transitions": [
        "audio.audio",
        "video.video"
      ],
      "compareparameters": {
          "function" :"maskgen.video_tools.audioCompare"
      }
    },
     {
      "category": "Audio",
      "name": "AudioReverb",
      "mandatoryparameters": {
        "Room Size Change": {
          "type": "list",
          "values" : ["small","medium","large"],
          "description": "How much change is being applied to the original signal"
        },
        "Damping": {
          "type": "yesno",
          "description": "Damping rather than increasing reverb."
        },
        "Damping Filters": {
          "type": "list",
          "values" : ["high","low","both","none"],
          "description": "Damping filters applied."
        }
      },
      "rules": [
        "checkFileTypeChange",
        "checkFrameTimes",
        "checkSameChannels"
      ],
      "optionalparameters": {
        "Pre-Delay": {
          "type": "int[0:1000000]",
          "description": "Milliseconds recording difference between signal and reverb"
        },
        "Reverb Time" : {
         "type": "int[-1000000:1000000]",
          "description": "Milliseconds based on RT60 value."
        },
        "Start Time": {
          "type": "time",
          "description": "Start time of the audio clip (HH:MI:SS.micro or frame number)"
        },
        "End Time": {
          "type": "time",
          "description": "End time of the audio clip (HH:MI:SS.micro or frame number)"
        }
      },
      "analysisOperations": [],
      "description": "Add Reverb or Dampen an Audio Signal to alter the perception of the room size.",
      "includeInMask": false,
      "generateMask" : true,
      "transitions": [
        "audio.audio",
        "video.video"
      ],
      "compareparameters": {
          "function" :"maskgen.video_tools.audioCompare"
      }
    },
     {
      "category": "Audio",
      "name": "AudioCompress",
      "mandatoryparameters": {
         "Attack": {
          "type": "float[0:100]",
          "description": "Length of time to react to reducing gain "
        },
         "Release": {
          "type": "float[0:100]",
          "description": "Length of time to return to normal gain reduction"
        },
        "Threshold": {
          "type": "int[-240:240]",
          "description": "Decibel Range"
        },
        "Ratio": {
          "type": "float[0:100]",
          "description": "How much to curb the output, in decibels (2:1) for example 2.0"
        },
        "Gain": {
          "type": "int[0:100000]",
          "description": "How much to raise volume"
        },
        "Start Time": {
          "type": "time",
          "description": "Start time of the audio clip (HH:MI:SS.micro or frame number)"
        }
      },
      "rules": [
        "checkFileTypeChange",
        "checkFrameTimes",
        "checkFrameTimeAlignment",
        "checkSameChannels"
      ],
      "optionalparameters": {
         "Stream" : {
          "type" : "list",
          "values": ["left", "right", "all"],
          "description" : "all includes mono and stereo, depending on available streams"
        },
        "End Time": {
          "type": "time",
          "description": "End time of the audio clip (HH:MI:SS.micro or frame number)"
        }
      },
      "analysisOperations": [],
      "description": "Compress Audio Signal",
      "includeInMask": false,
      "generateMask" : true,
      "transitions": [
        "audio.audio",
        "video.video"
      ],
       "compareparameters": {
          "function" :"maskgen.video_tools.audioCompare"
      }
    },
    {
      "category": "Audio",
      "name": "ReplaceAudioSample",
      "mandatoryparameters": {
        "voice" : {
            "type": "yesno",
             "description": "Is the sample a voice."
        },
        "filter type" : {
            "type": "list",
            "values" : ["EQ Match", "Other"],
             "description": "Replacing or overlaying."
        },
        "Start Time": {
          "type": "time",
          "description": "Start time of the audio clip (HH:MI:SS.micro or frame number)"
        },
        "Stream" : {
          "type" : "list",
          "values": ["left", "right", "all"],
          "description" : "all includes mono and stereo, depending on available streams"
        }
      },
      "rules": [
        "checkForDonor",
        "checkSize",
        "checkFileTypeChange",
        "checkFrameTimes",
        "checkAddFrameTime",
        "checkSameChannels"
      ],
      "optionalparameters": {
        "End Time": {
          "type": "time",
          "description": "End time of the audio clip (HH:MI:SS.micro or frame number)"
        }
      },
      "analysisOperations": [],
      "description": "Replacing with a donor audio stream to a video",
      "includeInMask": false,
      "generateMask" : true,
      "transitions": [
        "video.video",
        "audio.audio"
      ],
      "compareparameters": {
          "function" :"maskgen.video_tools.audioCompare"
      }
    },
     {
      "category": "AdditionalEffect",
      "name": "CameraMovement",
      "mandatoryparameters": {
         "Start Time": {
          "type": "time",
          "source": "video",
          "description": "Start time of the image clip (HH:MI:SS.micro or frame number)"
        },
        "End Time": {
          "type": "time",
          "source": "video",
          "description": "End time of the image clip (HH:MI:SS.micro or frame number)"
        },
        "Camera Effect": {
          "type": "list",
          "values": [
            "Add",
            "Remove"
          ],
          "description": ""
        }
      },
      "rules": [
        "checkSize",
        "checkFileTypeChange",
        "checkFrameTimes",
        "checkSameChannels"
      ],
      "optionalparameters": {
      },
      "analysisOperations": [ "maskgen.tool_set.globalTransformAnalysis"],
      "description": "Make it appear is if the camera is moving or not moving",
      "includeInMask": false,
      "transitions": [
        "video.video"
      ]
    },
    {
      "category": "AdditionalEffect",
      "name": "Fading",
      "mandatoryparameters": {
        "Start Time": {
          "type": "time",
          "source": "video",
          "description": "Start time of the image clip (HH:MI:SS.micro or frame number)"
        },
        "End Time": {
          "type": "time",
          "source": "video",
          "description": "End time of the image clip (HH:MI:SS.micro or frame number)"
        }
      },
      "rules": [
        "checkLengthSame",
        "checkSize",
        "checkFileTypeChange",
        "checkFrameTimes",
        "check_local_warn",
        "checkSameChannels"
      ],
      "optionalparameters": {
        "inputmaskname": {
          "type": "file:image",
          "description": "An image file containing a mask describing the areas affected."
        }
      },
      "analysisOperations": [ "maskgen.tool_set.globalTransformAnalysis"],
      "description": "Decrease opacity of an image or a layer.",
      "includeInMask": false,
      "transitions": [
        "video.video"
      ]
    },
    {
      "category": "AdditionalEffect",
      "name": "Mosaic",
      "mandatoryparameters": {
        "Start Time": {
          "type": "time",
          "source": "video",
          "description": "Start time of the image clip (HH:MI:SS.micro or frame number)"
        },
        "End Time": {
          "type": "time",
          "source": "video",
          "description": "End time of the image clip (HH:MI:SS.micro or frame number)"
        },
        "Vertical Block Number": {
          "type": "int[1:400000]",
          "description": "Number of rectangular regions created in vertical direction"
        },
        "Horizontal Block Number": {
          "type": "int[1:400000]",
          "description": "Number of rectangular regions created in horizontal direction"
        },
        "Sharp Colors": {
          "type" : "yesno",
          "description": "Sharp colors"
        }
      },
      "rules": [
        "checkLengthSame",
        "checkSize",
        "checkFileTypeChange",
        "checkFrameTimes",
        "checkSameChannels"
      ],
      "optionalparameters": {
      },
      "analysisOperations": [ "maskgen.tool_set.globalTransformAnalysis"],
      "description": "Create a mosaic pattern and then reassemble",
      "includeInMask": false,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "AdditionalEffect",
      "name": "ReduceInterlaceFlicker",
      "mandatoryparameters": {
         "Start Time": {
          "type": "time",
          "source": "video",
          "description": "Start time of the image clip (HH:MI:SS.micro or frame number)"
        },
        "End Time": {
          "type": "time",
          "source": "video",
          "description": "End time of the image clip (HH:MI:SS.micro or frame number)"
        }
      },
      "rules": [
        "checkLengthSame",
        "checkSize",
        "checkFrameTimes",
        "checkSameChannels"
      ],
      "optionalparameters": {
        "inputmaskname": {
          "type": "file:image",
          "description": "An image file containing a mask describing the areas affected."
        }
      },
      "analysisOperations": [ "maskgen.tool_set.globalTransformAnalysis"],
      "description": "Smooth the artifacts resultant from interlacing.",
      "includeInMask": false,
      "transitions": [
        "video.video"
      ]
    },
    {
      "category": "Filter",
      "name": "AddNoise",
      "mandatoryparameters": {
         "Start Time": {
          "type": "time",
          "source": "video",
          "description": "Start time of the image clip (HH:MI:SS.micro or frame number)"
        },
        "End Time": {
          "type": "time",
          "source": "video",
          "description": "End time of the image clip (HH:MI:SS.micro or frame number)"
        },
        "Noise Type": {
          "type" : "list",
          "values" : ["salt-pepper", "shot", "uniform", "random", "gaussian", "periodic", "other" ],
          "description": "The type of noise introduced"
        }
      },
      "rules": [
        "checkLengthSame",
        "checkSize",
        "checkFrameTimes",
        "check_local",
        "checkSameChannels"
      ],
      "optionalparameters": {
        "inputmaskname": {
          "type": "file:image",
          "description": "An image file containing a mask describing the areas affected."
        }
      },
      "analysisOperations": [ "maskgen.tool_set.globalTransformAnalysis"],
      "description": "Add random variations of brightness or color information.",
      "includeInMask": false,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "Filter",
      "name": "Blur",
      "mandatoryparameters": {
         "Start Time": {
          "type": "time",
          "source": "video",
          "description": "Start time of the image clip (HH:MI:SS.micro or frame number)"
        },
        "End Time": {
          "type": "time",
          "source": "video",
          "description": "End time of the image clip (HH:MI:SS.micro or frame number)"
        },
        "Blur Type": {
          "type": "list",
          "values" : ["Smooth", "Wavelet Denoise",  "Median Smoothing", "Gaussian", "Radial", "Tilt Shift", "Motion", "Other"],
          "description" : "Please include details in the general description.  Smooth textures while preserving edge detail. Use Median Smoothing apply nonlinear digital filtering technique to remove noise while preserving edges"
        },
        "Laundering": {
          "type": "yesno",
          "description": "Is the intent to launder the image or a simply smoothing."
        }
      },
      "rules": [
        "checkLengthSame",
        "checkSize",
        "checkFileTypeChange",
        "checkFrameTimes",
        "check_local",
        "checkSameChannels"
      ],
      "optionalparameters": {
        "inputmaskname": {
          "type": "file:image",
          "description": "An image file containing a mask describing the areas affected."
        }
      },
      "analysisOperations": [ "maskgen.tool_set.globalTransformAnalysis"],
      "description": "Make details unclear or less distinct.",
      "includeInMask": true,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "AdditionalEffect",
      "name": "WarpStabilize",
      "mandatoryparameters": {
         "result" : {
           "type": "list",
            "values": [
            "smooth motion",
            "no motion"
           ],
          "description": "Smooth Motion = smoothed at a variable rate, preserving camera motion. No Motion = All motion has been removed in order to make a shot appear as though it was attached to a surface."
        },
        "method" : {
          "type": "list",
          "values": [
            "position",
            "position,scale and rotation",
            "perspective",
            "subspace warp"
          ],
          "description": "Position = Stabilization is based on position data only and is the most basic way footage can be stabilized. Position, Scale and Rotation = Stabilization is based on manipulations to the frame that change the size, orientation, and location. Perspective  = Uses a type of stabilization in which the entire frame is effectively corner-pinned. If there are not enough areas to track, Warp Stabilizer chooses the previous type (Position, Scale, Rotation). Subspace Warp = Attempts to warp various parts of the frame differently to stabilize the entire frame. If there are not enough areas to track, Warp Stabilizer choose the previous type (Perspective)."
        },
        "boarders" : {
          "type": "list",
          "values": [
            "stablize only",
            "stablize crop",
            "crop auto-scale",
            "synthesize edges"
          ],
          "description": "Stabilize Only - Displays the entire frame, including the moving edges. Stabilize, Crop = Crops the moving edges without scaling. Stabilize, Crop, Auto-scale = Crops the moving edges and scales up the image to refill the frame. Stabilize, Synthesize Edges =  Fills in the blank space created by the moving edges with content from frames earlier and later in time."
        }
      },
      "rules": [
        "checkLengthSame",
        "checkSize",
        "check_local_warn",
        "checkSameChannels"
      ],
      "optionalparameters": {},
      "analysisOperations": [ ],
      "description": "Distort and/or crop video layers in order to remove camera shake",
      "includeInMask": false,
      "generateMask" : false,
      "transitions": [
        "video.video"
      ]
    },
    {
      "category": "Filter",
      "name": "Sharpening",
      "mandatoryparameters": {
         "Start Time": {
          "type": "time",
          "source": "video",
          "description": "Start time of the image clip (HH:MI:SS.micro or frame number)"
        },
        "End Time": {
          "type": "time",
          "source": "video",
          "description": "End time of the image clip (HH:MI:SS.micro or frame number)"
        }
      },
      "rules": [
        "checkLengthSame",
        "checkSize",
        "checkFileTypeChange",
        "checkFrameTimes",
        "check_local_warn",
        "checkSameChannels"
      ],
      "optionalparameters": {
        "inputmaskname": {
          "type": "file:image",
          "description": "An image file containing a mask describing the areas affected."
        }
      },
      "analysisOperations": [ "maskgen.tool_set.globalTransformAnalysis"],
      "description": "Enhance edge definition within an image.",
      "includeInMask": false,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "AdditionalEffect",
      "name": "AddTransitions",
      "mandatoryparameters": {
         "Start Time": {
          "type": "time",
          "source": "video",
          "description": "Start time of the image clip (HH:MI:SS.micro or frame number)"
        },
        "End Time": {
          "type": "time",
          "source": "video",
          "description": "End time of the image clip (HH:MI:SS.micro or frame number)"
        }
      },
      "rules": ["checkFrameTimes",
        "checkSameChannels"],
      "optionalparameters": {},
      "description": "Add a series of frame modifications that create a visual blend between two pieces of media",
      "includeInMask": false,
      "transitions": [
        "video.video"
      ]
    },
    {
      "category": "AntiForensic",
      "name": "AntiForensicCopyExif",
      "mandatoryparameters": {},
      "rules": [
        "checkSizeAndExif",
        "checkFileTypeChangeForDonor",
        "checkSameChannels"
      ],
      "optionalparameters": {
        "rotate": {
          "type":"yesno",
          "description": "Was video rotated"
        }
      },
      "analysisOperations": [ "maskgen.tool_set.globalTransformAnalysis"],
      "description": "Copy metadata information from a source.",
      "includeInMask": false,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
        {
      "category": "AntiForensic",
      "name": "AntiForensicEditExif",
      "mandatoryparameters": {},
      "rules": [
        "checkSize",
        "checkFileTypeChange",
        "checkSameChannels"
      ],
      "optionalparameters": {},
      "description": "Alter image metadata.",
      "includeInMask": false,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "AntiForensic",
      "name": "AntiForensicJPGCompression",
      "mandatoryparameters": {
        "qtfile": {
          "type": "fileset:plugins/JpgFromCamera/QuantizationTables",
          "description": "Quantization table file."
        }
      },
      "rules": [
        "check_eight_bit"
      ],
      "optionalparameters": {},
      "description": "Use quantization tables and exif data from a particular camera to save an image as JPG.",
      "includeInMask": false,
      "transitions": [
        "image.image"
      ]
    },
    {
      "category": "AntiForensic",
      "name": "AntiForensicDither",
      "mandatoryparameters": {},
      "rules": [
        "check_eight_bit",
        "checkSize"
      ],
      "optionalparameters": {},
      "description": "Disguise quantization artifacts by adding noise.",
      "includeInMask": false,
      "transitions": [
        "image.image"
      ]
    },
    {
      "category": "AntiForensic",
      "name": "AntiForensicExifQuantizationTable",
      "mandatoryparameters": {
        "rotate": {
          "type": "yesno",
          "description": "Rotate the image counter to the Orientation of copied EXIF."
        }
      },
      "rules": [
        "checkSizeAndExif",
        "checkForDonor",
        "check_eight_bit"
      ],
      "optionalparameters": {},
      "description": "Alter Image to be compliant with another images quantization and EXIF",
      "includeInMask": false,
      "transitions": [
        "image.image"
      ]
    },
    {
      "category": "AntiForensic",
      "name": "CFACorrection",
      "mandatoryparameters": {
      },
      "rules": [
        "checkSize",
        "check_eight_bit"
      ],
      "optionalparameters": {
        "Capture Camera ID": {
          "type": "text",
          "description": "ID of camera used to capture image if not screen shot"
        }
      },
      "description": "CFA Correction",
      "includeInMask": false,
      "transitions": [
        "image.image"
      ]
    },
    {
      "category": "AntiForensic",
      "name": "LensDistortion",
      "mandatoryparameters": {
        "Distortion Type": {
          "type": "list",
          "values": [
            "Pincushion",
            "Barrel",
            "Mustache"
          ],
          "description": "Type of distortion being applied to image."
        }
      },
      "rules": [
        "checkSize",
        "check_eight_bit"
      ],
      "optionalparameters": {},
      "description": "Apply artificial lens distortion",
      "includeInMask": false,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "AntiForensic",
      "name": "AddCamFingerprintPRNU",
      "mandatoryparameters": {},
      "rules": [
        "checkSize",
        "check_eight_bit"
      ],
      "optionalparameters": {
        "Capture Camera ID": {
          "type": "text",
          "description": "ID of camera used to capture image if not screen shot"
        }
      },
      "description": "Add PRNU fingerprint trace from an image.",
      "includeInMask": false,
      "transitions": [
        "image.image"
      ]
    },
    {
      "category": "AntiForensic",
      "name": "RemoveCamFingerprintPRNU",
      "mandatoryparameters": {},
      "rules": [
        "checkSize",
        "check_eight_bit"
      ],
      "optionalparameters": {
        "Capture Camera ID": {
          "type": "text",
          "description": "ID of camera used to capture image if not screen shot"
        }
      },
      "description": "Remove PRNU fingerprint from image.",
      "includeInMask": false,
      "transitions": [
        "image.image"
      ]
    },
    {
      "category": "AntiForensic",
      "name": "AddCamFingerprintAveragePRNUFromSet",
      "mandatoryparameters": {
        "Capture Camera ID": {
          "type": "text",
          "description": "Local ID of camera used to capture images"
        }
      },
      "rules": [
        "checkSize",
        "check_eight_bit"
      ],
      "optionalparameters": {
      },
      "description": "Add PRNU fingerprint trace, generated from a set of images.",
      "includeInMask": false,
      "transitions": [
        "image.image"
      ]
    },
    {
      "category": "AntiForensic",
      "name": "RemoveCamFingerprintAveragePRNUFromSet",
      "mandatoryparameters": {
        "Capture Camera ID": {
          "type": "text",
          "description": "Local ID of camera used to capture images"
        }
      },
      "rules": [
        "checkSize",
        "check_eight_bit"
      ],
      "optionalparameters": {},
      "description": "Remove PRNU fingerprint trace, generated from a set of images from a camera.",
      "includeInMask": false,
      "transitions": [
        "image.image"
      ]
    },
    {
      "category": "AntiForensic",
      "name": "AberrationCorrection",
      "mandatoryparameters": {
      },
      "rules": [
        "checkSize",
        "check_eight_bit"
      ],
      "optionalparameters": {},
      "description": "Chromatic Aberration Correction",
      "includeInMask": false,
      "transitions": [
        "image.image"
      ]
    },
    {
      "category": "CGI",
      "name": "ArtificialLighting",
      "mandatoryparameters": {
            "Start Time": {
          "type": "time",
          "source": "video",
          "description": "Start time of the image clip (HH:MI:SS.micro or frame number)"
        },
        "End Time": {
          "type": "time",
          "source": "video",
          "description": "End time of the image clip (HH:MI:SS.micro or frame number)"
        }
      },
      "rules": [
        "checkLengthSame",
        "checkSize",
        "checkFileTypeChange",
        "checkFrameTimes",
        "check_local_warn",
        "checkSameChannels"
      ],
      "optionalparameters": {
        "inputmaskname": {
          "type": "file:image",
          "source": "image",
          "description": "An image file containing a mask describing the areas affected."
        }
      },
      "analysisOperations": [ "maskgen.tool_set.globalTransformAnalysis"],
      "description": "Add sources of illumination that were not originally present.",
      "includeInMask": true,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "CGI",
      "name": "ArtificialReflection",
      "mandatoryparameters": {},
      "rules": [
        "checkLengthSame",
        "checkSize",
        "checkFileTypeChange",
        "check_local_warn",
        "checkSameChannels"
      ],
      "optionalparameters": {
        "inputmaskname": {
          "type": "file:image",
          "description": "An image file containing a mask describing the areas affected."
        }
      },
      "analysisOperations": [ "maskgen.tool_set.globalTransformAnalysis"],
      "description": "Add sources of reflection that were not originally present.",
      "includeInMask": true,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "CGI",
      "name": "ArtificialShadow",
      "mandatoryparameters": {},
      "rules": [
        "checkLengthSame",
        "checkSize",
        "checkFileTypeChange",
        "check_local_warn",
        "checkSameChannels",
        "checkVideoMasks"
      ],
      "optionalparameters": {
        "inputmaskname": {
          "type": "file:image",
          "description": "An image file containing a mask describing the areas affected."
        }
      },
      "analysisOperations": [ "maskgen.tool_set.globalTransformAnalysis"],
      "description": "Add shadows that were not originally present.",
      "includeInMask": true,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "CGI",
      "name": "ObjectCGI",
      "mandatoryparameters": {
         "file:image": {
          "type": "file:image",
          "description": "An image file containing the image used.  The unused portion of the image should be transparent with an alpha-channel"
        },
        "is3D": {
          "type":"yesno",
          "description":"Indicates if the CGI is a 3D model with light sources, etc."
        }
      },
      "rules": [
        "checkLengthSame",
        "checkSize",
        "checkFileTypeChange",
        "check_local_warn",
        "checkSameChannels",
        "checkVideoMasks"
      ],
      "optionalparameters": {
        "inputmaskname": {
          "type": "file:image",
          "description": "An image file containing a mask describing the areas affected."
        }
      },
      "analysisOperations": [ "maskgen.tool_set.globalTransformAnalysis"],
      "description": "Create objects that were not originally present in an image.",
      "includeInMask": true,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "Layer",
      "name": "LayerOpacity",
      "mandatoryparameters": {
        "Amount": {
          "type": "int[0:100]",
          "description": "Transparency level"
        },
         "Start Time": {
          "type": "time",
          "source": "video",
          "description": "Start time of the image clip (HH:MI:SS.micro or frame number)"
        },
        "End Time": {
          "type": "time",
          "source": "video",
          "description": "End time of the image clip (HH:MI:SS.micro or frame number)"
        }
      },
      "rules": [
        "checkLengthSame",
        "checkSize",
        "checkFileTypeChange",
        "checkFrameTimes",
        "checkSameChannels"
      ],
      "optionalparameters": {
        "inputmaskname": {
          "type": "file:image",
          "description": "An image file containing a mask describing the areas affected."
        }
      },
      "analysisOperations": [ "maskgen.tool_set.globalTransformAnalysis"],
      "description": "Change the transparency of a given color overlay.",
      "includeInMask": false,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "Layer",
      "name": "LayerFill",
      "mandatoryparameters": {
        "Amount": {
          "type": "int[0:100]",
          "description": "Fill level--amount of blended into the layer"
        },
         "Start Time": {
          "type": "time",
          "source": "video",
          "description": "Start time of the image clip (HH:MI:SS.micro or frame number)"
        },
        "End Time": {
          "type": "time",
          "source": "video",
          "description": "End time of the image clip (HH:MI:SS.micro or frame number)"
        }
      },
      "rules": [
        "checkLengthSame",
        "checkSize",
        "checkFileTypeChange",
        "checkFrameTimes",
        "check_local_warn",
        "checkSameChannels"
      ],
      "optionalparameters": {
        "inputmaskname": {
          "type": "file:image",
          "description": "An image file containing a mask describing the areas affected."
        }
      },
      "analysisOperations": [ "maskgen.tool_set.globalTransformAnalysis"],
      "description": "Change the fill using a solid color or gradient.",
      "includeInMask": false,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "Layer",
      "name": "Blend",
      "mandatoryparameters": {
         "Start Time": {
          "type": "time",
          "source": "video",
          "description": "Start time of the image clip (HH:MI:SS.micro or frame number)"
        },
        "End Time": {
          "type": "time",
          "source": "video",
          "description": "End time of the image clip (HH:MI:SS.micro or frame number)"
        },
        "mode": {
           "type":"list",
           "values" : ["Color Dodge","Color","Darken","Difference",
              "Dissolve","Divide","Exclusion","Hard Light",
             "Hard Mix","Hue","IntensityBurn","Lighten",
              "Lighter Dodge","Linear Burn","Linear Dodge (add)","Linear Light",
              "Luminosity","Multiply","Multiply","Pin Light","Saturation",
              "Screen","Smudge","Soft Light","Subtract","Vivid Light"],
           "description":"Blend Mode"
         }
      },
      "rules": [
        "checkLengthSame",
        "checkSize",
        "checkFileTypeChange",
        "checkFrameTimes",
        "check_local_warn",
        "checkSameChannels"
      ],
      "optionalparameters": {
      },
      "analysisOperations": [ "maskgen.tool_set.globalTransformAnalysis"],
      "description": "Edit or paint each pixel to make it the result color. The result color is a random replacement of the pixels with the base color or the blend color, depending on the opacity at any pixel location.",
      "includeInMask": true,
      "hidden" : false,
      "transitions": [
        "video.video"
      ]
    },
    {
      "category": "Laundering",
      "name": "SocialMedia",
      "mandatoryparameters": {
        "type": {
           "type":"list",
           "values" : ["Facebook", "Instagram"],
           "description":"Service"
         },
         "upload": {
           "type":"list",
           "values" : ["Mobile Device","Desktop"],
           "description":"How was the image uploaded?"
         },
        "download": {
           "type":"list",
           "values" : ["Mobile Device","Desktop"],
           "description":"How was the image downloaded"
         }
      },
      "rules": [
        "checkLengthSame",
        "checkSize",
        "checkSameChannels"
      ],
      "optionalparameters": {
      },
      "analysisOperations": [ "maskgen.tool_set.globalTransformAnalysis"],
      "description": "Laundering",
      "includeInMask": false,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "Color",
      "name": "ColorBalance",
      "mandatoryparameters": {},
      "rules": [
        "checkLengthSame",
        "checkSize",
        "checkFileTypeChange",
        "check_local_warn",
        "checkSameChannels"
      ],
      "optionalparameters": {
        "inputmaskname": {
          "type": "file:image",
          "description": "An image file containing a mask describing the areas affected."
        }
      },
      "analysisOperations": [ "maskgen.tool_set.globalTransformAnalysis"],
      "description": "Alter the Color Temperature of an image on a Yellow Blue Scale.",
      "includeInMask": false,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "Color",
      "name": "ColorLUT",
      "mandatoryparameters": {},
      "rules": [
        "checkLengthSame",
        "checkSize",
        "checkFileTypeChange",
        "check_local_warn",
        "checkSameChannels"
      ],
      "optionalparameters": {
        "inputmaskname": {
          "type": "file:image",
          "description": "An image file containing a mask describing the areas affected."
        },
        "lookuptable": {
          "type": "string",
          "description": "Name of the lookup table (LUT) to color grade layers of footage"
        }
      },
      "analysisOperations": [ "maskgen.tool_set.globalTransformAnalysis"],
      "description": "Changing color space or changing based on a lut.",
      "includeInMask": false,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "CGI",
      "name": "CGIFill",
      "mandatoryparameters": {
         "Start Time": {
          "type": "time",
          "source": "video",
          "description": "Start time of the image clip (HH:MI:SS.micro or frame number)"
        },
        "End Time": {
          "type": "time",
          "source": "video",
          "description": "End time of the image clip (HH:MI:SS.micro or frame number)"
        },
        "Fill Category": {
          "type": "list",
          "values" : ["uniform color", "pattern", "paint brush"],
          "description":"Fill Operation"
        }
      },
      "rules": [
        "checkLengthSame",
        "checkSize",
        "checkFileTypeChange",
        "checkFrameTimes",
        "check_local_warn",
        "checkSameChannels",
        "checkVideoMasks"
      ],
      "optionalparameters": {
        "inputmaskname": {
          "type": "file:image",
          "description": "An image file containing a mask describing the areas affected."
        }
      },
      "analysisOperations": [ "maskgen.tool_set.globalTransformAnalysis"],
      "description": "Uniformly alter the color of an image within a given selection.",
      "includeInMask": false,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "Color",
      "name": "Hue",
      "mandatoryparameters": {
        "Source" : {
          "type": "list",
          "values" : ["self","other"],
          "description":"source of color.  Other is some color palette or texture. Self is using a color from the same image."
        }
      },
      "rules": [
        "checkLengthSame",
        "checkSize",
        "checkFileTypeChange",
        "check_local_warn",
        "checkSameChannels"
      ],
      "optionalparameters": {
        "inputmaskname": {
          "type": "file:image",
          "description": "An image file containing a mask describing the areas affected."
        }
      },
      "analysisOperations": [ "maskgen.tool_set.globalTransformAnalysis"],
      "description": "Alter the color of a selection or image without adjusting saturation or luminance.",
      "includeInMask": false,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "Color",
      "name": "Saturation",
      "mandatoryparameters": {
        "Direction" : {
          "type":"list",
          "values" : ["increase", "decrease"],
          "description":"intent of saturation alteration"
        }
      },
      "rules": [
        "checkLengthSame",
        "checkSize",
        "checkFileTypeChange",
        "check_local_warn",
        "checkSameChannels"
      ],
      "optionalparameters": {
        "inputmaskname": {
          "type": "file:image",
          "description": "An image file containing a mask describing the areas affected."
        }
      },
      "analysisOperations": [ "maskgen.tool_set.globalTransformAnalysis"],
      "description": "Alter the color intensity of a given hue.",
      "includeInMask": false,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "Color",
      "name": "Vibrance",
      "mandatoryparameters": {
        "Direction": {
          "type":"list",
          "values": ["increase","decrease"],
          "description" : "INcrease or decrease color vibrance"
        }
      },
      "rules": [
        "checkLengthSame",
        "checkSize",
        "checkFileTypeChange",
        "check_local_warn",
        "checkSameChannels"
      ],
      "optionalparameters": {
        "inputmaskname": {
          "type": "file:image",
          "description": "An image file containing a mask describing the areas affected."
        }
      },
      "analysisOperations": [ "maskgen.tool_set.globalTransformAnalysis"],
      "description": "Visually change brightness and saturation",
      "includeInMask": false,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "Filter",
      "name": "CreativeFilter",
      "mandatoryparameters": {},
      "rules": [
        "checkLengthSame",
        "checkSize",
        "checkFileTypeChange",
        "checkSameChannels"
      ],
      "optionalparameters": {
        "inputmaskname": {
          "type": "file:image",
          "description": "An image file containing a mask describing the areas affected."
        }
      },
      "analysisOperations": [ "maskgen.tool_set.globalTransformAnalysis"],
      "description": "Filter to alter visual impact of the image.",
      "includeInMask": false,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "Paste",
      "name": "ContentAwareFill",
      "mandatoryparameters": {
        "purpose": {
          "type": "list",
          "values": [
            "remove",
            "enlarge",
            "heal",
            "other"
          ],
          "description": "Purpose: remove an object, enlarge (extend), or healing using sampled pixels."
        },
         "Start Time": {
          "type": "time",
          "source": "video",
          "description": "Start time of the image clip (HH:MI:SS.micro or frame number)"
        },
        "End Time": {
          "type": "time",
          "source": "video",
          "description": "End time of the image clip (HH:MI:SS.micro or frame number)"
        }
      },
      "rules": [
        "checkLengthSame",
        "checkSize",
        "checkFileTypeChange",
        "checkFrameTimes",
        "check_local",
        "checkSameChannels"
      ],
      "optionalparameters": {
        "inputmaskname": {
          "type": "file:image",
          "description": "An image file containing a mask describing the areas affected."
        }
      },
      "analysisOperations": [ "maskgen.tool_set.globalTransformAnalysis"],
      "description": "Synthesize nearby content for seamless blending with the surrounding content.",
      "compareparameters" : {
         "tolerance" : 0.0001
      },
      "includeInMask": true,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "CGI",
      "name": "Gradient",
      "mandatoryparameters": {
         "Start Time": {
          "type": "time",
          "source": "video",
          "description": "Start time of the image clip (HH:MI:SS.micro or frame number)"
        },
        "End Time": {
          "type": "time",
          "source": "video",
          "description": "End time of the image clip (HH:MI:SS.micro or frame number)"
        }
      },
      "rules": [
        "checkLengthSame",
        "checkSize",
        "checkFileTypeChange",
        "checkFrameTimes",
        "check_local_warn",
        "checkSameChannels"
      ],
      "optionalparameters": {
        "inputmaskname": {
          "type": "file:image",
          "description": "An image file containing a mask describing the areas affected."
        }
      },
      "analysisOperations": [ "maskgen.tool_set.globalTransformAnalysis"],
      "description": "Apply a donor adjustment within a selection with scaling intensities.",
      "includeInMask": false,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "Paste",
      "name": "PasteSampled",
      "mandatoryparameters": {
        "purpose": {
          "type": "list",
          "values": [
            "remove",
            "clone",
            "heal"
          ],
          "description": "Purpose: remove an object, clone (combination of add and remove), or healing using sampled pixels."
        },
        "Start Time": {
          "type": "time",
          "source": "video",
          "description": "Start time of the image clip (HH:MI:SS.micro or frame number)"
        },
        "End Time": {
          "type": "time",
          "source": "video",
          "description": "End time of the image clip (HH:MI:SS.micro or frame number)"
        }
      },
      "rules": [
        "checkSize",
        "checkLengthSame",
        "checkFileTypeChange",
        "checkFrameTimes",
        "checkInputMask",
        "check_local",
        "sampledInputMask",
        "checkSameChannels",
        "checkVideoMasks"
      ],
      "optionalparameters": {
        "inputmaskname": {
          "type": "file:image",
          "source": "image",
          "description": "An image file with a transparency highlighting the sampled areas of the image.",
          "rule" : {"purpose": "clone"}
        }
      },
      "analysisOperations": [ "maskgen.tool_set.globalTransformAnalysis"],
      "description": "Use sampled imagery from a given area to fill an area on the canvas.",
      "includeInMask": true,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "Filter",
      "name": "FilterConvolutionKernel",
      "mandatoryparameters": {
        "convolutionkernel":{
          "type": "fileset:",
          "description": "Text file containing 3x3 or 5x5 convolution kernel, separated by spaces and/or newlines."
        }
      },
      "rules": [
        "checkSize",
        "checkLengthSame",
        "checkFileTypeChange",
        "check_local_warn",
        "checkSameChannels"
      ],
      "optionalparameters": {
        "type":{
          "type": "list",
          "values": ["edge detection", "anti-alias", "sharpen", "unsharp masking", "blur", "gaussian blur", "other"],
          "description": "Description of the desired effect of the kernel (e.g. anti-aliasing, blurring, etc.)"
        }
      },
      "analysisOperations": [ "maskgen.tool_set.globalTransformAnalysis"],
      "description": "Convolve an image with a custom convolution kernel.",
      "includeInMask": false,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "Filter",
      "name": "MotionBlur",
      "mandatoryparameters": {},
      "rules": [
        "checkSize",
        "checkLengthSame",
        "checkFileTypeChange",
        "check_local_warn",
        "checkSameChannels"
      ],
      "optionalparameters": {
        "inputmaskname": {
          "type": "file:image",
          "description": "An image file containing a mask describing the areas affected."
        }
      },
      "analysisOperations": [ "maskgen.tool_set.globalTransformAnalysis"],
      "description": "Modify an image or image selection to create the illusion of motion.",
      "includeInMask": false,
      "transitions": [
        "video.video"
      ]
    },
    {
      "category": "Filter",
      "name": "CameraRawFilter",
      "mandatoryparameters": {},
      "rules": [
        "checkSize",
        "checkLengthSame",
        "checkFileTypeChange",
        "checkForRawFile",
        "checkSameChannels"
      ],
      "optionalparameters": {
        "inputmaskname": {
          "type": "file:image",
          "description": "An image file containing a mask describing the areas affected."
        },
        "XMP File Name": {
          "type": "file:xmp",
          "description": "XMP file recording meta-data."
        }
      },
      "analysisOperations": [ "maskgen.tool_set.globalTransformAnalysis"],
      "description": "Make edits to raw imagery in a raw processor.",
      "includeInMask": false,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "Filter",
      "name": "FilterKeying",
      "mandatoryparameters": {},
      "rules": [
        "checkLengthSame",
        "checkSameChannels"
      ],
      "optionalparameters": {},
      "description": "Remove a color from a layer of video.",
      "includeInMask": false,
      "transitions": [
        "video.video"
      ]
    },
    {
      "category": "Intensity",
      "name": "Normalization",
      "mandatoryparameters": {},
      "rules": [
        "checkSize",
        "checkLengthSame",
        "checkFileTypeChange",
        "check_local_warn",
        "checkSameChannels"
      ],
      "optionalparameters": {
         "gamma": {
          "type": "float[0:10]",
          "description": "Gamma Correction, if applicable"
        },
         "selection type": {
          "type": "list",
          "values": ["auto","manual"],
          "description": "Gamma Correction, if applicable"
        }
      },
      "analysisOperations": [ "maskgen.tool_set.globalTransformAnalysis"],
      "description": "Normalize using histograms.",
      "includeInMask": false,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "Intensity",
      "name": "Contrast",
      "mandatoryparameters": {},
      "rules": [
        "checkSize",
        "checkLengthSame",
        "checkFileTypeChange",
        "check_local_warn",
        "checkSameChannels"
      ],
      "optionalparameters": {},
      "analysisOperations": [ "maskgen.tool_set.globalTransformAnalysis"],
      "description": "Shift luminance values on a histogram where higher values become higher and lower values become lower.",
      "includeInMask": false,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "Intensity",
      "name": "Curves",
      "mandatoryparameters": {},
      "rules": [
        "checkSize",
        "checkLengthSame",
        "checkFileTypeChange",
        "check_local_warn",
        "checkLevelsVsCurves",
        "checkSameChannels"
      ],
      "optionalparameters": {},
      "analysisOperations": [ "maskgen.tool_set.globalTransformAnalysis"],
      "description": "Shift luminance values on a histogram with an editable and flexible curve.",
      "includeInMask": false,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "Intensity",
      "name": "Exposure",
      "mandatoryparameters": {
        "Direction" : {
          "type": "list",
          "values" : ["increase","decrease", "match to video frames"],
          "description": "Shift midtone luminance in the desired direction"
        }
      },
      "rules": [
        "checkSize",
        "checkLengthSame",
        "checkFileTypeChange",
        "check_local_warn",
        "checkSameChannels"
      ],
      "optionalparameters": {
        "inputmaskname": {
          "type": "file:image",
          "description": "An image file containing a mask describing the areas affected."
        }
      },
      "analysisOperations": [ "maskgen.tool_set.globalTransformAnalysis"],
      "description": "Shift all luminance values on a histogram to higher or lower values.",
      "includeInMask": false,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "Intensity",
      "name": "Levels",
      "mandatoryparameters": {},
      "rules": [
        "checkSize",
        "checkLengthSame",
        "checkFileTypeChange",
        "check_local_warn",
        "checkSameChannels"
      ],
      "optionalparameters": {
        "inputmaskname": {
          "type": "file:image",
          "description": "An image file containing a mask describing the areas affected."
        }
      },
      "analysisOperations": [ "maskgen.tool_set.globalTransformAnalysis"],
      "description": "Adjust brightness, contrast, and tonal range by specifying the location of complete black, complete white, and midtones in a histogram.",
      "includeInMask": false,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "Intensity",
      "name": "Luminosity",
      "mandatoryparameters": {},
      "rules": [
        "checkSize",
        "checkLengthSame",
        "checkFileTypeChange",
        "check_local_warn",
        "checkSameChannels"
      ],
      "optionalparameters": {
        "inputmaskname": {
          "type": "file:image",
          "description": "An image file containing a mask describing the areas affected."
        }
      },
      "analysisOperations": [ "maskgen.tool_set.globalTransformAnalysis"],
      "description": "Alter the values of a luminance histogram.",
      "includeInMask": false,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "CGI",
      "name": "DigitalPenDraw",
      "mandatoryparameters": {},
      "rules": [
        "checkSize",
        "checkLengthSame",
        "checkFileTypeChange",
        "checkFrameTimes",
        "check_local",
        "checkSameChannels",
        "checkVideoMasks"
      ],
      "optionalparameters": {
        "Start Time": {
          "type": "time",
          "source": "video",
          "description": "Start time of the image clip (HH:MI:SS.micro or frame number)"
        },
        "End Time": {
          "type": "time",
          "source": "video",
          "description": "End time of the image clip (HH:MI:SS.micro or frame number)"
        }
      },
      "analysisOperations": [ "maskgen.tool_set.globalTransformAnalysis"],
      "description": "Use the pencil or brush tool to add a pixel overlay to an image or selection.",
      "includeInMask": true,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "CGI",
      "name": "Handwriting",
      "mandatoryparameters": {},
      "rules": [
        "checkSize",
        "checkLengthSame",
        "checkFileTypeChange",
        "checkFrameTimes",
        "check_local",
        "checkSameChannels",
        "checkVideoMasks"
      ],
      "optionalparameters": {
        "Start Time": {
          "type": "time",
          "source": "video",
          "description": "Start time of the image clip (HH:MI:SS.micro or frame number)"
        },
        "End Time": {
          "type": "time",
          "source": "video",
          "description": "End time of the image clip (HH:MI:SS.micro or frame number)"
        }
      },
      "analysisOperations": [ "maskgen.tool_set.globalTransformAnalysis"],
      "description": "Use the pencil or brush tool to add a pixel overlay to an image or selection.",
      "includeInMask": true,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "CGI",
      "name": "OverlayObject",
      "mandatoryparameters": {},
      "rules": [
        "checkSize",
        "checkLengthSame",
        "checkFileTypeChange",
        "checkFrameTimes",
        "check_local",
        "checkFrameTimeAlignment",
        "checkSameChannels",
        "checkVideoMasks"
      ],
      "optionalparameters": {
        "Start Time": {
          "type": "time",
          "source": "video",
          "description": "Start time of the image clip (HH:MI:SS.micro or frame number)"
        },
        "End Time": {
          "type": "time",
          "source": "video",
          "description": "End time of the image clip (HH:MI:SS.micro or frame number)"
        }
      },
      "analysisOperations": [ "maskgen.tool_set.globalTransformAnalysis"],
      "description": "Add an object to another image or selection. Do not use a donor image.  Consider using ObjectCGI.",
      "includeInMask": true,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "CGI",
      "name": "OverlayText",
      "mandatoryparameters": {},
      "rules": [
        "checkSize",
        "checkLengthSame",
        "checkFileTypeChange",
        "checkFrameTimes",
        "check_local",
        "checkFrameTimeAlignment",
        "checkSameChannels",
        "checkVideoMasks"
      ],
      "optionalparameters": {
        "Start Time": {
          "type": "time",
          "source": "video",
          "description": "Start time of the image clip (HH:MI:SS.micro or frame number)"
        },
        "End Time": {
          "type": "time",
          "source": "video",
          "description": "End time of the image clip (HH:MI:SS.micro or frame number)"
        }
      },
      "analysisOperations": [ "maskgen.tool_set.globalTransformAnalysis"],
      "description": "Add text to an image or selection. Do not use a donor image.  Donor images must be inserted using a PasteSplice operation.",
      "includeInMask": true,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
     {
      "category": "Output",
      "name": "OutputCopy",
      "mandatoryparameters": {
      },
      "rules": [
        "checkSize",
        "checkSameChannels"
      ],
      "optionalparameters": {
      },
      "description": "Export the image in the in the same format. Used to branch off a final image  node",
      "includeInMask": false,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "Output",
      "name": "OutputBmp",
      "mandatoryparameters": {
        "Image Rotated": {
          "type": "yesno",
          "description": "Did the software rotate the image when removing the EXIF Orientation?"
        }
      },
      "rules": [
        "checkSize"
      ],
      "optionalparameters": {
        "XMP File Name": {
          "type": "file:xmp",
          "description": "XMP file provided when exporting from a raw image."
        }
      },
      "description": "Export the image in the bmp format.",
      "includeInMask": false,
      "transitions": [
        "image.image"
      ]
    },
     {
      "category": "Output",
      "name": "OutputWAV",
      "mandatoryparameters": {

      },
      "rules": [
         "checkLengthSame"
      ],
       "compareparameters": {
          "function" :"maskgen.video_tools.audioCompare"
      },
      "optionalparameters": {
      },
      "description": "Export the image in the WAV format.",
      "includeInMask": false,
      "transitions": [
        "audio.audio"
      ]
    },
     {
      "category": "Output",
      "name": "OutputAIF",
      "mandatoryparameters": {
      },
      "rules": [
         "checkLengthSame"
      ],
       "compareparameters": {
          "function" :"maskgen.video_tools.audioCompare"
      },
      "optionalparameters": {
      },
      "description": "Export the image in the AIF format.",
      "includeInMask": false,
      "transitions": [
        "audio.audio"
      ]
    },
    {
      "category": "Output",
      "name": "OutputDng",
      "mandatoryparameters": {},
      "rules": [
        "checkSize"
      ],
      "optionalparameters": {},
      "description": "Export the image in the DNG format.",
      "includeInMask": false,
      "transitions": [
        "image.image"
      ]
    },
    {
      "category": "Output",
      "name": "OutputJpg",
      "mandatoryparameters": {},
      "rules": [
        "checkSize"
      ],
      "optionalparameters": {
        "XMP File Name": {
          "type": "file:xmp",
          "description": "XMP file provided when exporting from a raw image."
        }
      },
      "description": "Export the image in the jpeg format.",
      "includeInMask": false,
      "transitions": [
        "image.image"
      ]
    },
    {
      "category": "Output",
      "name": "OutputPng",
      "mandatoryparameters": {
        "Image Rotated": {
          "type": "yesno",
          "description": "Did the software rotate the image when removing the EXIF Orientation?"
        }
      },
      "rules": [
        "checkSizeAndExif",
        "rotationCheck"
      ],
      "optionalparameters": {
        "XMP File Name": {
          "type": "file:xmp",
          "description": "XMP file provided when exporting from a raw image."
        }
      },
      "description": "Export the image in the png format.",
      "includeInMask": false,
      "transitions": [
        "image.image"
      ]
    },
    {
      "category": "Output",
      "name": "OutputPDF",
      "mandatoryparameters": {
        "resolution": {
          "type": "int",
          "description": "DPI"
        }
      },
      "rules": [
      ],
      "optionalparameters": {
      },
      "description": "Export the image in the PDF format.",
      "includeInMask": false,
      "transitions": [
        "image.image"
      ]
    },
    {
      "category": "Output",
      "name": "OutputTif",
      "mandatoryparameters": {
        "Image Rotated": {
          "type": "yesno",
          "description": "Did the software rotate the image when removing the EXIF Orientation?"
        }
      },
      "rules": [
        "checkSizeAndExif",
        "rotationCheck"
      ],
      "optionalparameters": {
        "XMP File Name": {
          "type": "file:xmp",
          "description": "XMP file provided when exporting from a raw image."
        }
      },
      "description": "Export the image in the tif format.",
      "includeInMask": false,
      "transitions": [
        "image.image"
      ]
    },
    {
      "category": "Output",
      "name": "OutputXVID",
      "mandatoryparameters": {
        "resolution": {
          "type": "string",
          "description": "Format width × height:  1280x960"
        },
        "pixel aspect": {
          "type": "list",
          "source": "video",
          "values": [
            "Square Pixels (1.0)",
            "D1/DV NTSC (0.9091)",
            "D1/DV NTSC Widescreen 16:9 (1.2121)",
            "D1/DV PAL (1.0940)",
            "D1/DV PAL Widescreen 16:9 (1.4587)",
            "Anamorphic 2:1 (2.0)",
            "HD Anamorphic 1080 (1.333)",
            "DVCPRO HD (1.5)",
            "Custom"
          ],
          "description": "."
        }
      },
      "rules": [
        "checkSameChannels"
      ],
      "optionalparameters": {},
      "description": "Export the image in the xvid format.",
      "includeInMask": false,
      "generateMask" : false,
      "transitions": [
        "video.video"
      ]
    },
    {
      "category": "Output",
      "name": "OutputMOV",
      "mandatoryparameters": {
        "resolution": {
          "type": "string",
          "description": "Format width × height:  1280x960"
        },
        "pixel aspect": {
          "type": "list",
          "source": "video",
          "values": [
            "Square Pixels (1.0)",
            "D1/DV NTSC (0.9091)",
            "D1/DV NTSC Widescreen 16:9 (1.2121)",
            "D1/DV PAL (1.0940)",
            "D1/DV PAL Widescreen 16:9 (1.4587)",
            "Anamorphic 2:1 (2.0)",
            "HD Anamorphic 1080 (1.333)",
            "DVCPRO HD (1.5)",
            "Custom"
          ],
          "description": "."
        }
      },
      "rules": [
        "checkSameChannels"
      ],
      "optionalparameters": {},
      "description": "Export the image in the MOV format.",
      "includeInMask": false,
      "generateMask" : false,
      "transitions": [
        "video.video"
      ]
    },
    {
      "category": "Output",
      "name": "OutputMP4",
      "mandatoryparameters": {
        "resolution": {
          "type": "string",
          "description": "Format width × height:  1280x960"
        },
        "pixel aspect": {
          "type": "list",
          "source": "video",
          "values": [
            "Square Pixels (1.0)",
            "D1/DV NTSC (0.9091)",
            "D1/DV NTSC Widescreen 16:9 (1.2121)",
            "D1/DV PAL (1.0940)",
            "D1/DV PAL Widescreen 16:9 (1.4587)",
            "Anamorphic 2:1 (2.0)",
            "HD Anamorphic 1080 (1.333)",
            "DVCPRO HD (1.5)",
            "Custom"
          ],
          "description": "."
        }
      },
      "rules": [
        "checkSameChannels"
      ],
      "optionalparameters": {},
      "description": "Export the image in the MP4 format.",
      "includeInMask": false,
      "generateMask" : true,
      "transitions": [
        "video.video"
      ]
    },
    {
      "category": "Output",
      "name": "OutputAVI",
      "mandatoryparameters": {
        "Video Rotated": {
          "type": "yesno",
          "description": "Enter yes if the donor is rotated during the paste operation"
        }
      },
      "rules": [
        "checkSameChannels",
        "checkResolution"
      ],
      "optionalparameters": {
        "resolution": {
          "type": "string",
          "description": "Format width × height:  1280x960"
        },
        "pixel aspect": {
          "type": "list",
          "source": "video",
          "values": [
            "Square Pixels (1.0)",
            "D1/DV NTSC (0.9091)",
            "D1/DV NTSC Widescreen 16:9 (1.2121)",
            "D1/DV PAL (1.0940)",
            "D1/DV PAL Widescreen 16:9 (1.4587)",
            "Anamorphic 2:1 (2.0)",
            "HD Anamorphic 1080 (1.333)",
            "DVCPRO HD (1.5)",
            "Custom"
          ],
          "description": "."
        }
      },
      "description": "Export the image in the AVI format.",
      "includeInMask": false,
      "generateMask" : false,
      "transitions": [
        "video.video"
      ]
    },
    {
      "category": "Paste",
      "name": "PasteSplice",
      "mandatoryparameters": {
        "donor rotated": {
          "type": "yesno",
          "description": "Enter yes if the donor is rotated during the paste operation"
        },
        "donor resized": {
          "type": "yesno",
          "description": "Enter yes if the donor is resized during the paste operation"
        },
        "donor cropped": {
          "type": "yesno",
          "description": "Enter yes if the donor is cropped the paste operation. Ideally, crop should occur as a SelectRegion operation just prior to donation."
        },
        "purpose": {
          "type": "list",
          "values": [
            "remove",
            "add",
            "blend"
          ],
          "description": "Purpose: remove an object, add an object."
        },
        "subject": {
          "type": "list",
          "values": [
            "people",
            "face",
            "natural object",
            "man-made object",
            "large man-made object",
            "landscape",
            "other"
          ],
          "description": "Subject catgeory pasted to image"
        }
      },
      "rules": [
        "checkSize",
        "checkSIFT",
        "checkForDonorWithRegion",
        "checkFileTypeChange",
        "check_local",
        "check_pastemask"
      ],
      "optionalparameters": {
        "mode": {
           "type":"list",
           "values" : ["Color Dodge","Color","Darken","Difference","Dissolve","Divide","Exclusion","Hard Light","Hard Mix","Hue","IntensityBurn","Lighten","Lighter Dodge","Linear Burn",
             "Linear Dodge (add)","Linear Light","Luminosity","Multiply","Opacity","Overlay","Pin Light","Saturation","Screen","Soft Light","Subtract","Vivid Light" ],
           "description":"Blend Mode",
           "rule" : {"purpose": "blend"}
         }
      },
      "maskTransformFunction": "maskgen.mask_rules.pastesplice",
      "analysisOperations": [ "maskgen.tool_set.globalTransformAnalysis"],
      "description": "Paste a region of an image spliced from another image.  The other image is a Donor image.  The donor image should first be prepared by using an alpha channel to exclude the unselected regions of the image.",
      "includeInMask": true,
      "transitions": [
        "image.image"
      ]
    },
    {
      "category": "Paste",
      "name": "PasteFrames",
      "mandatoryparameters": {
        "add type": {
          "type" : "list",
          "values" :["insert","replace"],
          "description": "Replacement does not have to be the same size."
        },
        "Start Time": {
          "type": "time",
          "description": "Start time of the image clip (HH:MI:SS.micro or frame number)"
        },
        "End Time": {
          "type": "time",
          "description": "End time of the image clip (HH:MI:SS.micro or frame number)"
        }
      },
      "rules": [
        "checkForDonor",
        "checkPasteFrameLength",
        "checkFrameTimes",
        "checkSameChannels"
      ],
      "optionalparameters": {},
      "description": "Adding a series of frames from a video clip",
      "includeInMask": true,
      "transitions": [
        "video.video"
      ]
    },
    {
      "category": "Paste",
      "name": "PasteOverlay",
      "mandatoryparameters": {
        "motion mapping": {
           "type": "yesno",
           "description": "Is motion mapping used?"
         },
        "purpose" : {
          "type" : "list",
           "values": [
            "remove",
            "add"
          ],
          "description": "Purpose: remove an object or add an object."
        }
      },
      "rules": [
        "checkForDonor",
        "checkLengthSame",
        "checkFrameTimes",
        "check_local",
        "checkFrameTimeAlignment",
        "checkSameChannels",
        "checkVideoMasks"
      ],
      "optionalparameters": {
        "Start Time": {
          "type": "time",
          "description": "Start time of the image clip (HH:MI:SS.micro or frame number)"
        },
        "End Time": {
          "type": "time",
          "description": "Stop time of the image clip (HH:MI:SS.micro or frame number)"
        }
      },
      "description": "Paste a series of green screen frames from a donor video clip, overlaying frames.",
      "includeInMask": true,
      "transitions": [
        "video.video"
      ]
    },
    {
      "category": "Paste",
      "name": "PasteImageSpliceToFrames",
      "mandatoryparameters": {
         "subject": {
           "type": "list",
           "values": [
             "people",
             "face",
             "natural object",
             "man-made object",
             "large man-made object",
             "landscape",
             "other"
           ],
           "description": "Subject catgeory pasted to image"
         },
        "motion mapping": {
          "type": "yesno",
          "description": "Is motion mapping used?"
        },
        "purpose": {
          "type": "list",
          "values": [
            "remove",
            "add"
          ],
          "description": "Purpose: remove an object, add an object."
        }
      },
      "rules": [
        "checkSize",
        "checkForDonorWithRegion",
        "checkFrameTimes",
        "check_local",
        "checkFrameTimeAlignment",
        "checkSameChannels",
        "checkVideoMasks"
      ],
      "optionalparameters": {
        "Start Time": {
          "type": "time",
          "description": "Start time of the image clip (HH:MI:SS.micro or frame number)"
        },
        "End Time": {
          "type": "time",
          "description": "Stop time of the image clip (HH:MI:SS.micro or frame number)"
        }
      },
      "analysisOperations": [],
      "description": "Paste into a series of frames an image spliced from another image.  The other image is a Donor image.  The donor image should first be prepared by using an alpha channel to exclude the unselected regions of the image.",
      "includeInMask": true,
      "transitions": [
        "video.video"
      ]
    },
      {
      "category": "Paste",
      "name": "CopyPaste",
      "mandatoryparameters": {
        "Select Start Time": {
          "type": "time",
          "description": "Start time of the copied video clip (HH:MI:SS.micro or frame number)"
        },
        "Number of Frames": {
         "type": "int[0:1000000]",
          "description": "Numbers of frames copy/pasted"
        },
         "Dest Paste Time": {
          "type": "time",
          "description": "Position in the video where the copied frames were pasted(HH:MI:SS.micro or frame number)"
        }
      },
      "rules": [
        "checkLengthBigger",
        "checkSameChannels"
      ],
      "optionalparameters": {},
      "description": "Copy & Paste a series of frames within the same video",
      "includeInMask": true,
      "transitions": [
        "video.video"
      ]
    },
    {
      "category": "Paste",
      "name": "CutPaste",
      "mandatoryparameters": {
        "Select Start Time": {
          "type": "time",
          "description": "Start time of the cut video clip (HH:MI:SS.micro or frame number)"
        },
        "Number of Frames": {
         "type": "int[0:1000000]",
          "description": "Numbers of frames cut/pasted"
        },
        "Dest Paste Time": {
          "type": "time",
          "description": "Position in the video where the cut frames were pasted(HH:MI:SS.micro or frame number)"
        }
      },
      "rules": [
        "checkLengthSame",
        "checkSameChannels"
      ],
      "optionalparameters": {},
      "description": "Cut & Paste a series of frames within the same video",
      "includeInMask": true,
      "transitions": [
        "video.video"
      ]
    },
    {
      "category": "PostProcessing",
      "name": "PostProcessingSizeUpDownOrgExif",
      "mandatoryparameters": {},
      "rules": [
        "checkSize",
        "checkFileTypeChange"
      ],
      "optionalparameters": {},
      "description": "Alter the metadata in order that when the image is displayed it changes the presentation orientation.",
      "includeInMask": false,
      "transitions": [
        "image.image"
      ]
    },
    {
      "category": "PostProcessing",
      "name": "Recapture",
      "mandatoryparameters": {
        "Output Device": {
          "type": "list",
          "values": [
            "Gloss Paper",
            "Flat Paper",
            "LCD",
            "LED",
            "CRT",
            "Screen Shot",
            "Other Device"
          ],
          "description": "Type of image display"
        },
         "Resolution": {
          "type": "text",
          "description": "Resolution of output device e.g. 300 DPI of print or PPI of screen. https://www.noteloop.com/kit/display/pixel-density/"
        },
         "Capture Distance": {
          "type": "int[0:100000]",
          "description": "Distance in centimeters from camera to print"
        },
        "Magnification": {
          "type": "float[0:100000]",
          "description": "Magnification = (hi/ho) = -(di/do), where hi = image height, ho = object height, and di and do = image and object distance"
        }
      },
      "analysisOperations": [
        "maskgen.tool_set.siftAnalysis"
      ],
      "rules": [
      ],
      "optionalparameters": {
        "Capture Camera ID": {
          "type": "text",
          "description": "ID of camera used to capture image if not screen shot"
        },
        "Capture Printer ID": {
          "type": "text",
          "description": "ID of printer used to compose the image"
        },
        "Capture Printer Type": {
          "type": "list",
          "values": [
            "Inkjet",
            "Laser",
            "Analog",
            "Other"
          ],
          "description": "Base type of printer used to compose the image"
        },
        "Position Mapping": {
          "type": "boxpair",
          "description": "Maps the bounding regions of each image"
        }
      },
      "maskTransformFunction": "maskgen.mask_rules.recapture_transform",
      "description": "Recapture an image through a digital photo of a picture or screen shot.",
      "includeInMask": false,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "Select",
      "name": "SelectRegion",
      "mandatoryparameters": {
         "subject": {
          "type": "list",
          "values": [
            "people",
            "face",
            "natural object",
            "man-made object",
            "large man-made object",
            "landscape",
            "other"
          ],
          "description": "Subject catgeory selected to image"
        },
         "location change": {
          "type": "list",
          "values": [
            "yes","no"
          ],
          "description": "Did the selected region relocate in the image?"
        }
      },
      "rules": [
        "checkSize",
        "checkFileTypeChange"
      ],
      "optionalparameters": {
        "inputmaskname": {
          "type": "file:image",
          "description": "An image file containing a mask describing the areas affected."
        }
      },
      "analysisOperations": [
         "maskgen.tool_set.optionalSiftAnalysis"
      ],
      "description": "Create a limited selection in a donor image.  The result should be preserved in PNG.  Best practice involves using an alpha channel to mask out unselected regions.  The image can then be spliced into a series if frames.",
      "includeInMask": false,
      "compareparameters" : {
         "convert_function" :"maskgen.tool_set.extractAlpha"
      },
      "transitions": [
        "image.image"
      ]
    },
    {
      "category": "Select",
      "name": "SelectRegionFromFrames",
      "mandatoryparameters": {},
      "rules": ["checkFrameTimes",
        "checkSameChannels"],
      "optionalparameters": {
        "Start Time": {
          "type": "time",
          "description": "Start time of the image clip (HH:MI:SS.micro or frame number)"
        },
        "End Time": {
          "type": "time",
          "description": "End time of the image clip (HH:MI:SS.micro or frame number)"
        },
        "key insertion" :{
           "type" : "yesno",
           "description": "Was a chroma or luminance key inserted into the video?"
        }
      },
      "description": "Create a limited selection,removing background,from a donor video,for the intent of pasting.  The result should be a black back ground for non-keyed manipulations.",
      "includeInMask": false,
      "transitions": [
        "video.video"
      ]
    },
    {
      "category": "Select",
      "name": "SelectCutFrames",
      "mandatoryparameters": {},
      "rules": [
        "checkLengthSmaller",
        "checkFrameTimes",
        "checkSameChannels"
      ],
      "optionalparameters": {
        "Start Time": {
          "type": "time",
          "description": "Start time of the image clip (HH:MI:SS.micro or frame number)"
        },
        "End Time": {
          "type": "time",
          "description": "End time of the image clip (HH:MI:SS.micro or frame number)"
        }
      },
      "description": "Remove a series of frames from a video clip.",
      "includeInMask": false,
      "transitions": [
        "video.video"
      ]
    },
    {
      "category": "Select",
      "name": "SelectCropFrames",
      "mandatoryparameters": {
         "Start Time": {
          "type": "time",
          "description": "Start time of the image clip (HH:MI:SS.micro or frame number)"
        },
        "End Time": {
          "type": "time",
          "description": "End time of the image clip (HH:MI:SS.micro or frame number)"
        }
      },
      "rules": [
        "checkLengthSmaller","checkFrameTimes",
        "checkSameChannels"
      ],
      "optionalparameters": {
      },
      "description": "Remove all frames before and after the selected video clip.",
      "includeInMask": false,
      "generateMask": false,
      "transitions": [
        "video.video"
      ]
    },
    {
      "category": "Select",
      "name": "SelectRemove",
      "mandatoryparameters": {},
      "rules": [
        "checkSize",
        "checkFileTypeChange"
      ],
      "optionalparameters": {
        "tolerance": {
          "type": "float[0:1]",
          "description": "How much influence a pixel change has on the resulting mask."
        }
      },
      "maskTransformFunction": "maskgen.mask_rules.select_remove",
      "description": "Remove a limited selection within an image.",
      "includeInMask": true,
      "transitions": [
        "image.image"
      ]
    },
    {
      "category": "Select",
      "name": "SelectImageFromFrame",
      "mandatoryparameters": {
        "Frame Time": {
          "type": "time",
          "description": "Presentation time of the select frame (HH:MI:SS.micro or frame number)"
        }
      },
      "rules": [
      ],
      "optionalparameters": {
      },
      "description": "Select a single frame into an image.",
      "includeInMask": false,
      "transitions": [
        "video.image"
      ]
    },
    {
      "category": "Output",
      "name": "OutputMosaic",
      "mandatoryparameters": {
        "Start Time": {
          "type": "time",
          "source": "video",
          "description": "Start time of the image clip (HH:MI:SS.micro or frame number)"
        },
        "End Time": {
          "type": "time",
          "source": "video",
          "description": "End time of the image clip (HH:MI:SS.micro or frame number)"
        }
      },
      "rules": [
      ],
      "optionalparameters": {
      },
      "analysisOperations": [ ""],
      "description": "Stitching video frames together to form a comprehensive view of the scene.",
      "includeInMask": false,
      "transitions": [
        "video.image"
      ]
    },
    {
      "category": "TimeAlteration",
      "name": "TimeAlterationEcho",
      "mandatoryparameters": {
        "Echo Time": {
          "type": "float[-100:100]",
          "description": "The time, in seconds, between echoes. Negative values create echoes from previous frames; positive values create echoes from upcoming frames."
        },
        "Number of Echos": {
          "type": "int[0:1000000]",
          "description": "The number of echoes. For example, if the value is 2, the result is a combination of three frames: the current time, the current time + Echo Time, and the current time + (2 * Echo Time)."
        },
        "Starting Intensities": {
          "type": "int[0:100000]",
          "description": "The opacity of the first image in the echo sequence"
        },
        "Operator": {
          "type": "string",
          "description": "The operation used. For example: Add,Maximum,Minimum,Screen,Composite In Back,Composite In Front and Blend"
        }
      },
      "rules": [
        "checkLengthSame","checkFrameTimes",
        "checkSameChannels"
      ],
      "optionalparameters": {
        "Start Time": {
          "type": "time",
          "description": "Start time of the image clip (HH:MI:SS.micro or frame number)"
        },
        "End Time": {
          "type": "time",
          "description": "End time of the image clip (HH:MI:SS.micro or frame number)"
        }
      },
      "description": "Duplicate video frames and replay them at a delay to create a trail.",
      "includeInMask": false,
      "transitions": [
        "video.video"
      ]
    },
    {
      "category": "TimeAlteration",
      "name": "TimeAlterationPosterizeTime",
      "mandatoryparameters": {
        "Frame Rate": {
          "type": "float[0:1000000]",
          "description": "Frames per second"
        }
      },
      "rules": [
        "checkLengthSame","checkFrameTimes",
        "checkSameChannels"
      ],
      "optionalparameters": {
        "Start Time": {
          "type": "time",
          "description": "Start time of the image clip (HH:MI:SS.micro or frame number)"
        },
        "End Time": {
          "type": "time",
          "description": "End time of the image clip (HH:MI:SS.micro or frame number)"
        }
      },
      "description": "Lock a layer to a specific frame rate.",
      "includeInMask": false,
      "generateMask" : false,
      "transitions": [
        "video.video"
      ]
    },
    {
      "category": "TimeAlteration",
      "name": "TimeAlterationDifferenceEffect",
      "mandatoryparameters": {
        "Time Offset": {
          "type": "float[0:1000000]",
          "description": "The relative time in the comparison layer, in seconds, where the layers are compared"
        },
        "Target Layer": {
          "type": "int[0:100]",
          "description": "Target layer number to be compared to the effect layer"
        },
        "Alpha Channel": {
          "type": "list",
          "values": [
            "Original",
            "Target",
            "Blend",
            "Max",
            "Full On",
            "Lightness Of Result",
            "Max Of Result",
            "Alpha Difference",
            "Alpha Difference Only"
          ],
          "description": "Specifies how the alpha channel is calculated."
        }
      },
      "rules": [
        "checkLengthSame",
        "checkFrameTimes",
        "checkSameChannels"
      ],
      "optionalparameters": {
        "Start Time": {
          "type": "time",
          "description": "Start time of the image clip (HH:MI:SS.micro or frame number)"
        },
        "End Time": {
          "type": "time",
          "description": "End time of the image clip (HH:MI:SS.micro or frame number)"
        }
      },
      "description": "Calculate the color difference between two layers as a useful aid in color correction",
      "includeInMask": false,
      "generateMask" : false,
      "transitions": [
        "video.video"
      ]
    },
    {
      "category": "TimeAlteration",
      "name": "TimeAlterationDisplacementEffect",
      "mandatoryparameters": {
        "Max Displacement Time": {
          "type": "int[0:100000000]",
          "description": "Sets the maximum time, in seconds, from which pixels are replaced, before or after the current time."
        },
        "Time Resolution": {
          "type": "float[0:10000000]",
          "description": "Sets the number of frames per second in which to replace pixels"
        }
      },
      "rules": [
        "checkLengthSame","checkFrameTimes",
        "checkSameChannels"
      ],
      "optionalparameters": {
        "Start Time": {
          "type": "time",
          "description": "Start time of the image clip (HH:MI:SS.micro or frame number)"
        },
        "End Time": {
          "type": "time",
          "description": "End time of the image clip (HH:MI:SS.micro or frame number)"
        }
      },
      "description": "Distorts the image by shifting pixels across time.",
      "includeInMask": false,
      "generateMask" : false,
      "transitions": [
        "video.video"
      ]
    },
    {
      "category": "TimeAlteration",
      "name": "TimeAlterationWarp",
      "mandatoryparameters": {
        "Method": {
          "type": "list",
          "values": [
            "Whole Frames",
            "Frame Mix",
            "Pixel Motion"
          ],
          "description": "The Method setting determines how interpolated frames are generated."
        },
        "Vector Detail": {
          "type": "int[0:100]",
          "description": "Determine how many motion vectors are used during interpolation. The more vectors used, the longer the rendering time. A value of 100 produces one vector per pixel."
        }
      },
      "rules": ["checkFrameTimes",
        "checkSameChannels"],
      "optionalparameters": {
        "Smoothing": {
          "type": "list",
          "values": [
            "Build From One Image",
            "Correct Luminance Changes",
            "Filtering"
          ],
          "description": "These controls affect the sharpness of the image."
        },
        "Weighting": {
          "type": "string",
          "description": "Weighting red, green, and blue channels in calculations used to analyze the image.  Suggest comma-separated values for RGB."
        },
        "Adjust Time By": {
          "type": "float[0:100]",
          "description": "Choose Speed to specify a time adjustment as a percentage"
        },
        "Start Time": {
          "type": "time",
          "description": "Start time of the image clip (HH:MI:SS.micro or frame number)"
        },
        "End Time": {
          "type": "time",
          "description": "End time of the image clip (HH:MI:SS.micro or frame number)"
        }
      },
      "description": "Alter frame rate and frame blending to change playback rate. Vector Detail is a integer that determines how many motion vectors are used during interpolation. Methods include 'Whole Frames', 'Frame Mix' and 'Pixel Motion'. Adjust Time By controls is a percentage of reduction.",
      "includeInMask": false,
      "generateMask" : false,
      "transitions": [
        "video.video"
      ]
    },
     {
      "category": "Transform",
      "name": "ImageInterpolation",
      "mandatoryparameters": {
          "Start Time": {
          "type": "time",
          "source": "video",
          "description": "Start time of the image clip (HH:MI:SS.micro or frame number)"
        },
        "End Time": {
          "type": "time",
          "source": "video",
          "description": "End time of the image clip (HH:MI:SS.micro or frame number)"
        }
      },
      "rules": [
        "checkSize",
        "checkLengthSame",
        "checkFileTypeChange",
        "checkFrameTimes",
        "checkSameChannels"
      ],
      "optionalparameters": {
        "inputmaskname": {
          "type": "file:image",
          "description": "An image file containing a mask describing the areas affected."
        }
      },
      "analysisOperations": [ "maskgen.tool_set.globalTransformAnalysis"],
      "description": "Replace large selections with an averaging of surrounding pixel groups.",
      "includeInMask": false,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "Transform",
      "name": "TransformAffine",
      "mandatoryparameters": {},
      "rules": [
        "checkSize",
        "checkFileTypeChange",
        "check_local_warn",
        "checkSameChannels"
      ],
      "optionalparameters": {
        "homography": {
          "type": "list",
          "source": "image",
           "values": [
             "All",
             "LMEDS",
             "RANSAC-3",
             "RANSAC-4",
             "RANSAC-5"
           ],
           "description": "Tune transform creation for composite mask generation"
        },
        "homography max matches" : {
            "type": "int[20:10000]",
           "description": "Maximum number of matched feature points used to compute the homography."
        }
      },
      "analysisOperations": [
        "maskgen.tool_set.forcedSiftAnalysis"
      ],
      "description": "Apply a linear mapping method that preserves points, straight lines, and planes",
      "includeInMask": false,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "Transform",
      "name": "TransformContentAwareScale",
      "mandatoryparameters": {},
      "rules": [
        "checkSize",
        "checkFileTypeChange",
        "check_local_warn",
        "checkSameChannels"
      ],
      "optionalparameters": {
        "homography": {
          "type": "list",
          "source": "image",
           "values": [
             "None",
             "Map",
             "All",
             "LMEDS",
             "RANSAC-3",
             "RANSAC-4",
             "RANSAC-5"
           ],
           "description": "Tune transform creation for composite mask generation"
        },
        "composite homography": {
          "type": "list",
          "source": "image",
          "values": [
            "Single",
            "Multiple"
          ],
          "description": "Use a single transform or one per probe mask component"
        },
        "homography max matches" : {
            "type": "int[20:10000]",
           "description": "Maximum number of matched feature points used to compute the homography."
        }
      },
      "analysisOperations": [
        "maskgen.tool_set.forcedSiftAnalysis"
      ],
      "maskTransformFunction": "maskgen.mask_rules.cas_transform",
      "description": "Resize an image without changing important visual content.",
      "includeInMask": false,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "Transform",
      "name": "TransformCrop",
      "mandatoryparameters": {},
      "rules": [
        "checkFileTypeChange",
        "checkCropSize",
        "check_eight_bit",
        "checkSameChannels"
      ],
      "optionalparameters": {
        "location": {
          "type": "coordinates",
          "description": "Tuple in form of (x,y) describing the upper left crop corner."
        }
      },
      "compareparameters" : {
         "function" :"maskgen.tool_set.cropCompare"
      },
      "analysisOperations": [
        "maskgen.tool_set.globalTransformAnalysis"
      ],
      "description": "Removing edge content from an image. For video, remove data from certain areas of the frame.",
      "includeInMask": false,
      "generateMask" : false,
      "maskTransformFunction": "maskgen.mask_rules.crop_transform",
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "Transform",
      "name": "TransformDistort",
      "mandatoryparameters": {},
      "rules": [
        "checkSize",
        "checkFileTypeChange",
        "check_local_warn",
        "checkSameChannels"
      ],
      "optionalparameters": {
        "inputmaskname": {
          "type": "file:image",
          "description": "An image file containing a mask describing the areas affected."
        },
        "homography": {
          "type": "list",
          "source": "image",
           "values": [
             "All",
             "LMEDS",
             "RANSAC-3",
             "RANSAC-4",
             "RANSAC-5"
           ],
           "description": "Tune transform creation for composite mask generation"
        },
        "homography max matches" : {
            "type": "int[20:10000]",
           "description": "Maximum number of matched feature points used to compute the homography."
        }
      },
      "analysisOperations": [
        "maskgen.tool_set.forcedSiftAnalysis"
      ],
      "description": "Alter the shape and dimensions of a given selection or image.",
      "includeInMask": false,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "Transform",
      "name": "TransformFlip",
      "mandatoryparameters": {
        "flip direction": {
          "type": "list",
          "values": [
            "horizontal",
            "vertical",
            "both"
          ],
          "description": "Direction of flip."
        }
      },
      "rules": [
        "checkSize",
        "checkFileTypeChange",
        "check_local_warn",
        "checkSameChannels"
      ],
      "optionalparameters": {
        "inputmaskname": {
          "type": "file:image",
          "description": "An image file containing a mask describing the areas affected."
        }
      },
      "analysisOperations": [
        "maskgen.tool_set.globalTransformAnalysis"
      ],
      "description": "Reverse pixel coordinates of an image or selection along a vertical or horizontal axis.",
      "includeInMask": false,
      "generateMask" : false,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "Transform",
      "name": "TransformMove",
      "mandatoryparameters": {
      "inputmaskname": {
          "type": "file:image",
          "description": "An image file containing a mask describing the component that was moved. "
        }
      },
      "rules": [
        "checkSize",
        "checkFileTypeChange",
        "checkInputMask",
        "check_local_warn",
        "checkSameChannels"
      ],
      "optionalparameters": {

        "homography": {
          "type": "list",
          "source": "image",
           "values": [
             "None",
             "Map",
             "All",
             "LMEDS",
             "RANSAC-3",
             "RANSAC-4",
             "RANSAC-5"
           ],
           "description": "Tune transform creation for composite mask generation"
        },
        "homography max matches" : {
            "type": "int[20:10000]",
           "description": "Maximum number of matched feature points used to compute the homography."
        },
        "use input mask for composites": {
          "type":"list",
          "values":["JT decides", "yes", "no"],
          "description" : "Override JT decision to use the input mask in composite generation"
        }
      },
      "analysisOperations": [
        "maskgen.tool_set.forcedSiftWithInputAnalysis"
      ],
      "maskTransformFunction": "maskgen.mask_rules.move_transform",
      "description": "Reposition a selection within a larger composition.",
      "includeInMask": false,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "Transform",
      "name": "TransformResize",
      "mandatoryparameters": {
          "interpolation": {
          "type": "list",
          "source": "image",
          "values": [
             "none-canvas expanded",
             "bicubic",
             "bilinear",
             "cubic",
             "mesh",
             "lanczos",
             "nearest",
             "other"
          ],
          "description": "Interpolation is used to resize entire composite images. 'none' indicates a canvas size increase."
        }
      },
      "rules": [
        "checkFileTypeChange",
        "checkResizeInterpolation",
        "check_local_warn",
        "checkSameChannels"
      ],
      "optionalparameters": {
         "inputmaskname": {
          "type": "file:image",
          "description": "An image file containing a mask of the component that was moved"
        },
        "homography": {
          "type": "list",
          "source": "image",
          "values": [
             "None",
             "All",
             "LMEDS",
             "RANSAC-3",
             "RANSAC-4",
             "RANSAC-5"
           ],
           "description": "Tune transform creation for composite mask generation"
        },
        "homography max matches" : {
            "type": "int[20:10000]",
           "description": "Maximum number of matched feature points used to compute the homography."
        }
      },
      "analysisOperations": [
        "maskgen.tool_set.forcedSiftAnalysis"
      ],
      "maskTransformFunction": "maskgen.mask_rules.resize_transform",
      "description": "Alter the dimensions of an image.",
      "includeInMask": false,
      "generateMask" : false,
      "transitions": [
        "image.image"
      ]
    },
    {
      "category": "Transform",
      "name": "TransformRotate",
      "mandatoryparameters": {
        "rotation": {
          "type": "int[-360:360]",
          "description": "The rotation should be provided in degrees counter-clockwise (ex. -90 for clockwise, 90 for counterclockwise)"
        }
      },
      "rules": [
        "checkFileTypeChange",
        "check_local_warn",
        "checkSameChannels"
      ],
      "optionalparameters": {
        "homography": {
          "type": "list",
          "source": "image",
          "values": [
             "None",
             "All",
             "LMEDS",
             "RANSAC-3",
             "RANSAC-4",
             "RANSAC-5"
           ],
           "description": "Tune transform creation for composite mask generation"
        },
        "homography max matches" : {
            "type": "int[20:10000]",
           "description": "Maximum number of matched feature points used to compute the homography."
        }
      },
      "analysisOperations": [
        "maskgen.tool_set.siftAnalysis"
      ],
      "description": "Alter the angle of display for an image or layer.  The image dimensions may resized to accomodate the rotation.",
      "includeInMask": false,
      "maskTransformFunction": "maskgen.mask_rules.rotate_transform",
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "Transform",
      "name": "TransformScale",
      "mandatoryparameters": {},
      "rules": [
        "checkSize",
        "checkFileTypeChange",
        "check_local_warn",
        "checkSameChannels"
      ],
      "optionalparameters": {
        "homography": {
          "type": "list",
          "source": "image",
           "values": [
             "None",
             "All",
             "LMEDS",
             "RANSAC-3",
             "RANSAC-4",
             "RANSAC-5"
           ],
           "description": "Tune transform creation for composite mask generation"
        },
        "homography max matches" : {
            "type": "int[20:10000]",
           "description": "Maximum number of matched feature points used to compute the homography."
        }
      },
      "analysisOperations": [
        "maskgen.tool_set.forcedSiftAnalysis"
      ],
      "description": "Change the size of an image or layer while preserving dimensions.",
      "includeInMask": false,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "Transform",
      "name": "TransformSeamCarving",
      "mandatoryparameters": {
        "inputmaskname": {
          "type": "file:image",
          "description": "An image file containing a mask describing preserved and sliced areas"
        }
      },
      "rules": [
        "seamCarvingCheck",
        "checkFileTypeChange",
        "checkSameChannels"
      ],
      "optionalparameters": {
        "homography": {
          "type": "list",
          "source": "image",
           "values": [
             "None",
             "Map",
             "All",
             "LMEDS",
             "RANSAC-3",
             "RANSAC-4",
             "RANSAC-5"
           ],
           "description": "Tune transform during composite mask generation"
        },
        "composite homography": {
          "type": "list",
          "source": "image",
          "values": [
            "Single",
            "Multiple"
          ],
          "description": "Use a single transform or one per probe mask component"
        },
        "homography max matches" : {
            "type": "int[20:10000]",
           "description": "Maximum number of matched feature points used to compute the homography."
        }
      },
      "compareparameters" : {
         "function" :"maskgen.tool_set.seamCompare"
      },
      "analysisOperations": [
        "maskgen.tool_set.forcedSiftAnalysis"
      ],
      "maskTransformFunction": "maskgen.mask_rules.seam_transform",
      "description": "Resize an image while preserving the integrity of content.",
      "includeInMask": false,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "Transform",
      "name": "TransformShear",
      "mandatoryparameters": {},
      "rules": [
        "checkSize",
        "checkFileTypeChange",
        "checkSameChannels"
      ],
      "optionalparameters": {
        "inputmaskname": {
          "type": "file:image",
          "description": "An image file containing a mask describing the areas affected."
        },
        "homography": {
          "type": "list",
          "source": "image",
         "values": [
             "None",
             "All",
             "LMEDS",
             "RANSAC-3",
             "RANSAC-4",
             "RANSAC-5"
           ],
           "description": "Tune transform creation for composite mask generation"
        },
        "homography max matches" : {
            "type": "int[20:10000]",
           "description": "Maximum number of matched feature points used to compute the homography."
        }
      },
      "analysisOperations": [
        "maskgen.tool_set.forcedSiftAnalysis"
      ],
      "description": "Warp the shape of an object or a selection with anchored endpoints.",
      "includeInMask": false,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "Transform",
      "name": "TransformSkew",
      "mandatoryparameters": {},
      "rules": [
        "checkSize",
        "checkFileTypeChange",
        "check_local_warn",
        "checkSameChannels"
      ],
      "optionalparameters": {
        "inputmaskname": {
          "type": "file:image",
          "description": "An image file containing a mask describing the areas affected."
        },
        "homography": {
          "type": "list",
          "source": "image",
          "values": [
             "None",
             "All",
             "LMEDS",
             "RANSAC-3",
             "RANSAC-4",
             "RANSAC-5"
           ],
           "description": "Tune transform creation for composite mask generation"
        },
        "homography max matches" : {
            "type": "int[20:10000]",
           "description": "Maximum number of matched feature points used to compute the homography."
        }
      },
      "analysisOperations": [
        "maskgen.tool_set.forcedSiftAnalysis"
      ],
      "description": "Alter the shape or dimensions of a given selection or image along their respective vertices.",
      "includeInMask": false,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "Transform",
      "name": "TransformWarp",
      "mandatoryparameters": {},
      "rules": [
        "checkSize",
        "checkFileTypeChange",
        "check_local_warn",
        "checkSameChannels"
      ],
      "optionalparameters": {
        "inputmaskname": {
          "type": "file:image",
          "description": "An image file containing a mask describing the areas affected."
        },
         "homography": {
          "type": "list",
          "source": "image",
          "values": [
             "None",
             "Map",
             "All",
             "LMEDS",
             "RANSAC-3",
             "RANSAC-4",
             "RANSAC-5",
             "RANSAC-6"
           ],
           "description": "Tune transform creation for composite mask generation"
        },
        "homography max matches" : {
            "type": "int[20:10000]",
           "description": "Maximum number of matched feature points used to compute the homography."
        }
      },
      "analysisOperations": [
        "maskgen.tool_set.forcedSiftAnalysis"
      ],
      "maskTransformFunction" :"maskgen.mask_rules.warp_transform",
      "description": "Freely alter the shape or dimensions of a given selection or image.",
      "includeInMask": false,
      "transitions": [
        "image.image",
        "video.video"
      ]
    },
    {
      "category": "Transform",
      "name": "TransformDownSample",
      "mandatoryparameters": {
        "resolution": {
          "type": "string",
          "description": "Format width × height:  1280x960"
        },
        "pixel aspect": {
           "type": "list",
           "source": "video",
           "values": [
             "No Change",
             "Square Pixels (1.0)",
             "D1/DV NTSC (0.9091)",
             "D1/DV NTSC Widescreen 16:9 (1.2121)",
             "D1/DV PAL (1.0940)",
             "D1/DV PAL Widescreen 16:9 (1.4587)",
             "Anamorphic 2:1 (2.0)",
             "HD Anamorphic 1080 (1.333)",
             "DVCPRO HD (1.5)",
             "Custom"],
           "description": "."
        }
      },
      "rules": [
        "checkSameChannels"
      ],
      "optionalparameters": {
        "interlacing": {
          "type": "list",
          "source": "video",
          "values": [ "add", "remove", "semantic-remove"],
          "description": "Semantic remove attempts to mitigate lines prior to export in non interlaced format."
        }
      },
      "description": "Down sample a video to a lower frame resolution.",
      "includeInMask": false,
      "generateMask" : false,
      "transitions": [
        "video.video"
      ]
    },
    {
      "category": "Transform",
      "name": "TransformReverse",
      "mandatoryparameters": {
      },
      "rules": [
        "checkSameChannels"
      ],
      "optionalparameters": {
        "Homography": {
          "type": "list",
          "source": "image",
         "values": [
             "All",
             "LMEDS",
             "RANSAC-3",
             "RANSAC-4",
             "RANSAC-5"
           ],
           "description": "Tune transform creation for composite mask generation"
        },
        "homography max matches" : {
            "type": "int[20:10000]",
           "description": "Maximum number of matched feature points used to compute the homography."
        }
      },
      "description": "Reverse the direction of video play.",
      "includeInMask": false,
      "generateMask" : false,
      "transitions": [
        "video.video"
      ]
    }
  ],
  "filtergroups": {
    "PasteSpliceBlend": [
      "PasteOverlay",
      "CopyBlended"
    ]
  },
  "node_properties": {
    "audio": {
      "Registered" : {
        "type": "yesno",
        "description" : "Is Registered?"
      },
      "In Door" : {
        "type": "yesno",
        "description" : "Is Indoor Sample?"
      },
      "Source Type": {
        "type": "list",
        "values" : ["background", "voice"],
        "description" : "Prominent audio signal"
      },
      "Device ID": {
        "type": "string",
        "description" : "Valid Microphone Device ID"
      },
      "Proximity": {
        "type": "list",
        "values" : ["short", "medium", "far"],
        "description" : "Microphone distance to subject"
      },
      "cgi" : {
        "type": "yesno",
        "description" : "Is CGI?"
      }
    },
    "video": {
      "cgi" : {
        "type": "yesno",
        "description" : "Is CGI?"
      }
    },
    "image": {
      "cgi" : {
        "type": "yesno",
        "description" : "Is CGI?"
      }
    }
  }
}
